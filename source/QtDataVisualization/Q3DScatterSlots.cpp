/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "Q3DScatterSlots.h"

static SlotsQ3DScatter * s = NULL;

SlotsQ3DScatter::SlotsQ3DScatter(QObject *parent) : QObject(parent)
{
}

SlotsQ3DScatter::~SlotsQ3DScatter()
{
}
void SlotsQ3DScatter::axisXChanged( QValue3DAxis * axis )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "axisXChanged(QValue3DAxis*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM paxis = hb_itemPutPtr( NULL, (QValue3DAxis *) axis );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, paxis );
    hb_itemRelease( psender );
    hb_itemRelease( paxis );
  }
}
void SlotsQ3DScatter::axisYChanged( QValue3DAxis * axis )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "axisYChanged(QValue3DAxis*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM paxis = hb_itemPutPtr( NULL, (QValue3DAxis *) axis );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, paxis );
    hb_itemRelease( psender );
    hb_itemRelease( paxis );
  }
}
void SlotsQ3DScatter::axisZChanged( QValue3DAxis * axis )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "axisZChanged(QValue3DAxis*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM paxis = hb_itemPutPtr( NULL, (QValue3DAxis *) axis );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, paxis );
    hb_itemRelease( psender );
    hb_itemRelease( paxis );
  }
}
void SlotsQ3DScatter::selectedSeriesChanged( QScatter3DSeries * series )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "selectedSeriesChanged(QScatter3DSeries*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pseries = hb_itemPutPtr( NULL, (QScatter3DSeries *) series );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pseries );
    hb_itemRelease( psender );
    hb_itemRelease( pseries );
  }
}

HB_FUNC( Q3DSCATTER_ONAXISXCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScatter( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "axisXChanged(QValue3DAxis*)", "axisXChanged(QValue3DAxis*)" ) );
}

HB_FUNC( Q3DSCATTER_ONAXISYCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScatter( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "axisYChanged(QValue3DAxis*)", "axisYChanged(QValue3DAxis*)" ) );
}

HB_FUNC( Q3DSCATTER_ONAXISZCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScatter( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "axisZChanged(QValue3DAxis*)", "axisZChanged(QValue3DAxis*)" ) );
}

HB_FUNC( Q3DSCATTER_ONSELECTEDSERIESCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScatter( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "selectedSeriesChanged(QScatter3DSeries*)", "selectedSeriesChanged(QScatter3DSeries*)" ) );
}

