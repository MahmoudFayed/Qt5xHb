/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QCustom3DVolumeSlots.h"

static SlotsQCustom3DVolume * s = NULL;

SlotsQCustom3DVolume::SlotsQCustom3DVolume(QObject *parent) : QObject(parent)
{
}

SlotsQCustom3DVolume::~SlotsQCustom3DVolume()
{
}
void SlotsQCustom3DVolume::alphaMultiplierChanged( float mult )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "alphaMultiplierChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmult = hb_itemPutND( NULL, mult );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmult );
    hb_itemRelease( psender );
    hb_itemRelease( pmult );
  }
}
void SlotsQCustom3DVolume::colorTableChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "colorTableChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQCustom3DVolume::drawSliceFramesChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "drawSliceFramesChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void SlotsQCustom3DVolume::drawSlicesChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "drawSlicesChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void SlotsQCustom3DVolume::preserveOpacityChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "preserveOpacityChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void SlotsQCustom3DVolume::sliceFrameColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "sliceFrameColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQCustom3DVolume::sliceFrameGapsChanged( const QVector3D & values )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "sliceFrameGapsChanged(QVector3D)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalues = hb_itemPutPtr( NULL, (QVector3D *) &values );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalues );
    hb_itemRelease( psender );
    hb_itemRelease( pvalues );
  }
}
void SlotsQCustom3DVolume::sliceFrameThicknessesChanged( const QVector3D & values )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "sliceFrameThicknessesChanged(QVector3D)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalues = hb_itemPutPtr( NULL, (QVector3D *) &values );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalues );
    hb_itemRelease( psender );
    hb_itemRelease( pvalues );
  }
}
void SlotsQCustom3DVolume::sliceFrameWidthsChanged( const QVector3D & values )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "sliceFrameWidthsChanged(QVector3D)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalues = hb_itemPutPtr( NULL, (QVector3D *) &values );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalues );
    hb_itemRelease( psender );
    hb_itemRelease( pvalues );
  }
}
void SlotsQCustom3DVolume::sliceIndexXChanged( int value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "sliceIndexXChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutNI( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void SlotsQCustom3DVolume::sliceIndexYChanged( int value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "sliceIndexYChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutNI( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void SlotsQCustom3DVolume::sliceIndexZChanged( int value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "sliceIndexZChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutNI( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void SlotsQCustom3DVolume::textureDepthChanged( int value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "textureDepthChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutNI( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void SlotsQCustom3DVolume::textureFormatChanged( QImage::Format format )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "textureFormatChanged(QImage::Format)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pformat = hb_itemPutNI( NULL, (int) format );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pformat );
    hb_itemRelease( psender );
    hb_itemRelease( pformat );
  }
}
void SlotsQCustom3DVolume::textureHeightChanged( int value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "textureHeightChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutNI( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void SlotsQCustom3DVolume::textureWidthChanged( int value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "textureWidthChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutNI( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void SlotsQCustom3DVolume::useHighDefShaderChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "useHighDefShaderChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}

HB_FUNC( QCUSTOM3DVOLUME_ONALPHAMULTIPLIERCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "alphaMultiplierChanged(float)", "alphaMultiplierChanged(float)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONCOLORTABLECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "colorTableChanged()", "colorTableChanged()" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONDRAWSLICEFRAMESCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "drawSliceFramesChanged(bool)", "drawSliceFramesChanged(bool)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONDRAWSLICESCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "drawSlicesChanged(bool)", "drawSlicesChanged(bool)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONPRESERVEOPACITYCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "preserveOpacityChanged(bool)", "preserveOpacityChanged(bool)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONSLICEFRAMECOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "sliceFrameColorChanged(QColor)", "sliceFrameColorChanged(QColor)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONSLICEFRAMEGAPSCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "sliceFrameGapsChanged(QVector3D)", "sliceFrameGapsChanged(QVector3D)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONSLICEFRAMETHICKNESSESCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "sliceFrameThicknessesChanged(QVector3D)", "sliceFrameThicknessesChanged(QVector3D)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONSLICEFRAMEWIDTHSCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "sliceFrameWidthsChanged(QVector3D)", "sliceFrameWidthsChanged(QVector3D)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONSLICEINDEXXCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "sliceIndexXChanged(int)", "sliceIndexXChanged(int)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONSLICEINDEXYCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "sliceIndexYChanged(int)", "sliceIndexYChanged(int)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONSLICEINDEXZCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "sliceIndexZChanged(int)", "sliceIndexZChanged(int)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONTEXTUREDEPTHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "textureDepthChanged(int)", "textureDepthChanged(int)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONTEXTUREFORMATCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "textureFormatChanged(QImage::Format)", "textureFormatChanged(QImage::Format)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONTEXTUREHEIGHTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "textureHeightChanged(int)", "textureHeightChanged(int)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONTEXTUREWIDTHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "textureWidthChanged(int)", "textureWidthChanged(int)" ) );
}

HB_FUNC( QCUSTOM3DVOLUME_ONUSEHIGHDEFSHADERCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DVolume( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "useHighDefShaderChanged(bool)", "useHighDefShaderChanged(bool)" ) );
}

