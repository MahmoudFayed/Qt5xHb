/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QSurfaceDataProxySlots.h"

static SlotsQSurfaceDataProxy * s = NULL;

SlotsQSurfaceDataProxy::SlotsQSurfaceDataProxy(QObject *parent) : QObject(parent)
{
}

SlotsQSurfaceDataProxy::~SlotsQSurfaceDataProxy()
{
}
void SlotsQSurfaceDataProxy::arrayReset()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "arrayReset()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQSurfaceDataProxy::columnCountChanged( int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "columnCountChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pcount );
  }
}
void SlotsQSurfaceDataProxy::itemChanged( int rowIndex, int columnIndex )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "itemChanged(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM prowIndex = hb_itemPutNI( NULL, rowIndex );
    PHB_ITEM pcolumnIndex = hb_itemPutNI( NULL, columnIndex );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, prowIndex, pcolumnIndex );
    hb_itemRelease( psender );
    hb_itemRelease( prowIndex );
    hb_itemRelease( pcolumnIndex );
  }
}
void SlotsQSurfaceDataProxy::rowCountChanged( int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rowCountChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pcount );
  }
}
void SlotsQSurfaceDataProxy::rowsAdded( int startIndex, int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rowsAdded(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstartIndex = hb_itemPutNI( NULL, startIndex );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pstartIndex, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pstartIndex );
    hb_itemRelease( pcount );
  }
}
void SlotsQSurfaceDataProxy::rowsChanged( int startIndex, int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rowsChanged(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstartIndex = hb_itemPutNI( NULL, startIndex );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pstartIndex, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pstartIndex );
    hb_itemRelease( pcount );
  }
}
void SlotsQSurfaceDataProxy::rowsInserted( int startIndex, int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rowsInserted(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstartIndex = hb_itemPutNI( NULL, startIndex );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pstartIndex, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pstartIndex );
    hb_itemRelease( pcount );
  }
}
void SlotsQSurfaceDataProxy::rowsRemoved( int startIndex, int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rowsRemoved(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstartIndex = hb_itemPutNI( NULL, startIndex );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pstartIndex, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pstartIndex );
    hb_itemRelease( pcount );
  }
}
void SlotsQSurfaceDataProxy::seriesChanged( QSurface3DSeries * series )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "seriesChanged(QSurface3DSeries*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pseries = hb_itemPutPtr( NULL, (QSurface3DSeries *) series );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pseries );
    hb_itemRelease( psender );
    hb_itemRelease( pseries );
  }
}

HB_FUNC( QSURFACEDATAPROXY_ONARRAYRESET )
{
  if( s == NULL )
  {
    s = new SlotsQSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "arrayReset()", "arrayReset()" ) );
}

HB_FUNC( QSURFACEDATAPROXY_ONCOLUMNCOUNTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "columnCountChanged(int)", "columnCountChanged(int)" ) );
}

HB_FUNC( QSURFACEDATAPROXY_ONITEMCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "itemChanged(int,int)", "itemChanged(int,int)" ) );
}

HB_FUNC( QSURFACEDATAPROXY_ONROWCOUNTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rowCountChanged(int)", "rowCountChanged(int)" ) );
}

HB_FUNC( QSURFACEDATAPROXY_ONROWSADDED )
{
  if( s == NULL )
  {
    s = new SlotsQSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rowsAdded(int,int)", "rowsAdded(int,int)" ) );
}

HB_FUNC( QSURFACEDATAPROXY_ONROWSCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rowsChanged(int,int)", "rowsChanged(int,int)" ) );
}

HB_FUNC( QSURFACEDATAPROXY_ONROWSINSERTED )
{
  if( s == NULL )
  {
    s = new SlotsQSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rowsInserted(int,int)", "rowsInserted(int,int)" ) );
}

HB_FUNC( QSURFACEDATAPROXY_ONROWSREMOVED )
{
  if( s == NULL )
  {
    s = new SlotsQSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rowsRemoved(int,int)", "rowsRemoved(int,int)" ) );
}

HB_FUNC( QSURFACEDATAPROXY_ONSERIESCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "seriesChanged(QSurface3DSeries*)", "seriesChanged(QSurface3DSeries*)" ) );
}

