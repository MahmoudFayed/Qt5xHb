/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "Q3DBarsSlots.h"

static Q3DBarsSlots * s = NULL;

Q3DBarsSlots::Q3DBarsSlots(QObject *parent) : QObject(parent)
{
}

Q3DBarsSlots::~Q3DBarsSlots()
{
}
void Q3DBarsSlots::barSpacingChanged( const QSizeF & spacing )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "barSpacingChanged(QSizeF)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pspacing = hb_itemPutPtr( NULL, (QSizeF *) &spacing );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pspacing );
    hb_itemRelease( psender );
    hb_itemRelease( pspacing );
  }
}
void Q3DBarsSlots::barSpacingRelativeChanged( bool relative )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "barSpacingRelativeChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM prelative = hb_itemPutL( NULL, relative );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, prelative );
    hb_itemRelease( psender );
    hb_itemRelease( prelative );
  }
}
void Q3DBarsSlots::barThicknessChanged( float thicknessRatio )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "barThicknessChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pthicknessRatio = hb_itemPutND( NULL, thicknessRatio );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pthicknessRatio );
    hb_itemRelease( psender );
    hb_itemRelease( pthicknessRatio );
  }
}
void Q3DBarsSlots::columnAxisChanged( QCategory3DAxis * axis )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "columnAxisChanged(QCategory3DAxis*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM paxis = hb_itemPutPtr( NULL, (QCategory3DAxis *) axis );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, paxis );
    hb_itemRelease( psender );
    hb_itemRelease( paxis );
  }
}
void Q3DBarsSlots::floorLevelChanged( float level )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "floorLevelChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM plevel = hb_itemPutND( NULL, level );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, plevel );
    hb_itemRelease( psender );
    hb_itemRelease( plevel );
  }
}
void Q3DBarsSlots::multiSeriesUniformChanged( bool uniform )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "multiSeriesUniformChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM puniform = hb_itemPutL( NULL, uniform );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, puniform );
    hb_itemRelease( psender );
    hb_itemRelease( puniform );
  }
}
void Q3DBarsSlots::primarySeriesChanged( QBar3DSeries * series )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "primarySeriesChanged(QBar3DSeries*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pseries = hb_itemPutPtr( NULL, (QBar3DSeries *) series );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pseries );
    hb_itemRelease( psender );
    hb_itemRelease( pseries );
  }
}
void Q3DBarsSlots::rowAxisChanged( QCategory3DAxis * axis )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rowAxisChanged(QCategory3DAxis*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM paxis = hb_itemPutPtr( NULL, (QCategory3DAxis *) axis );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, paxis );
    hb_itemRelease( psender );
    hb_itemRelease( paxis );
  }
}
void Q3DBarsSlots::selectedSeriesChanged( QBar3DSeries * series )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "selectedSeriesChanged(QBar3DSeries*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pseries = hb_itemPutPtr( NULL, (QBar3DSeries *) series );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pseries );
    hb_itemRelease( psender );
    hb_itemRelease( pseries );
  }
}
void Q3DBarsSlots::valueAxisChanged( QValue3DAxis * axis )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "valueAxisChanged(QValue3DAxis*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM paxis = hb_itemPutPtr( NULL, (QValue3DAxis *) axis );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, paxis );
    hb_itemRelease( psender );
    hb_itemRelease( paxis );
  }
}

HB_FUNC( Q3DBARS_ONBARSPACINGCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DBarsSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "barSpacingChanged(QSizeF)", "barSpacingChanged(QSizeF)" ) );
}

HB_FUNC( Q3DBARS_ONBARSPACINGRELATIVECHANGED )
{
  if( s == NULL )
  {
    s = new Q3DBarsSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "barSpacingRelativeChanged(bool)", "barSpacingRelativeChanged(bool)" ) );
}

HB_FUNC( Q3DBARS_ONBARTHICKNESSCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DBarsSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "barThicknessChanged(float)", "barThicknessChanged(float)" ) );
}

HB_FUNC( Q3DBARS_ONCOLUMNAXISCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DBarsSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "columnAxisChanged(QCategory3DAxis*)", "columnAxisChanged(QCategory3DAxis*)" ) );
}

HB_FUNC( Q3DBARS_ONFLOORLEVELCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DBarsSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "floorLevelChanged(float)", "floorLevelChanged(float)" ) );
}

HB_FUNC( Q3DBARS_ONMULTISERIESUNIFORMCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DBarsSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "multiSeriesUniformChanged(bool)", "multiSeriesUniformChanged(bool)" ) );
}

HB_FUNC( Q3DBARS_ONPRIMARYSERIESCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DBarsSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "primarySeriesChanged(QBar3DSeries*)", "primarySeriesChanged(QBar3DSeries*)" ) );
}

HB_FUNC( Q3DBARS_ONROWAXISCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DBarsSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rowAxisChanged(QCategory3DAxis*)", "rowAxisChanged(QCategory3DAxis*)" ) );
}

HB_FUNC( Q3DBARS_ONSELECTEDSERIESCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DBarsSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "selectedSeriesChanged(QBar3DSeries*)", "selectedSeriesChanged(QBar3DSeries*)" ) );
}

HB_FUNC( Q3DBARS_ONVALUEAXISCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DBarsSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "valueAxisChanged(QValue3DAxis*)", "valueAxisChanged(QValue3DAxis*)" ) );
}

