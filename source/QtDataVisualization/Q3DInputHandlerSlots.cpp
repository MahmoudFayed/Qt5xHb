/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "Q3DInputHandlerSlots.h"

static SlotsQ3DInputHandler * s = NULL;

SlotsQ3DInputHandler::SlotsQ3DInputHandler(QObject *parent) : QObject(parent)
{
}

SlotsQ3DInputHandler::~SlotsQ3DInputHandler()
{
}
void SlotsQ3DInputHandler::rotationEnabledChanged( bool enable )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rotationEnabledChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penable = hb_itemPutL( NULL, enable );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penable );
    hb_itemRelease( psender );
    hb_itemRelease( penable );
  }
}
void SlotsQ3DInputHandler::selectionEnabledChanged( bool enable )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "selectionEnabledChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penable = hb_itemPutL( NULL, enable );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penable );
    hb_itemRelease( psender );
    hb_itemRelease( penable );
  }
}
void SlotsQ3DInputHandler::zoomAtTargetEnabledChanged( bool enable )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "zoomAtTargetEnabledChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penable = hb_itemPutL( NULL, enable );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penable );
    hb_itemRelease( psender );
    hb_itemRelease( penable );
  }
}
void SlotsQ3DInputHandler::zoomEnabledChanged( bool enable )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "zoomEnabledChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penable = hb_itemPutL( NULL, enable );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penable );
    hb_itemRelease( psender );
    hb_itemRelease( penable );
  }
}

HB_FUNC( Q3DINPUTHANDLER_ONROTATIONENABLEDCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DInputHandler( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rotationEnabledChanged(bool)", "rotationEnabledChanged(bool)" ) );
}

HB_FUNC( Q3DINPUTHANDLER_ONSELECTIONENABLEDCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DInputHandler( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "selectionEnabledChanged(bool)", "selectionEnabledChanged(bool)" ) );
}

HB_FUNC( Q3DINPUTHANDLER_ONZOOMATTARGETENABLEDCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DInputHandler( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "zoomAtTargetEnabledChanged(bool)", "zoomAtTargetEnabledChanged(bool)" ) );
}

HB_FUNC( Q3DINPUTHANDLER_ONZOOMENABLEDCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DInputHandler( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "zoomEnabledChanged(bool)", "zoomEnabledChanged(bool)" ) );
}

