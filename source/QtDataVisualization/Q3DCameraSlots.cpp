/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "Q3DCameraSlots.h"

static Q3DCameraSlots * s = NULL;

Q3DCameraSlots::Q3DCameraSlots(QObject *parent) : QObject(parent)
{
}

Q3DCameraSlots::~Q3DCameraSlots()
{
}
void Q3DCameraSlots::cameraPresetChanged( Q3DCamera::CameraPreset preset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "cameraPresetChanged(Q3DCamera::CameraPreset)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ppreset = hb_itemPutNI( NULL, (int) preset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ppreset );
    hb_itemRelease( psender );
    hb_itemRelease( ppreset );
  }
}
void Q3DCameraSlots::maxZoomLevelChanged( float zoomLevel )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "maxZoomLevelChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pzoomLevel = hb_itemPutND( NULL, zoomLevel );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pzoomLevel );
    hb_itemRelease( psender );
    hb_itemRelease( pzoomLevel );
  }
}
void Q3DCameraSlots::minZoomLevelChanged( float zoomLevel )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "minZoomLevelChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pzoomLevel = hb_itemPutND( NULL, zoomLevel );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pzoomLevel );
    hb_itemRelease( psender );
    hb_itemRelease( pzoomLevel );
  }
}
void Q3DCameraSlots::targetChanged( const QVector3D & target )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "targetChanged(QVector3D)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ptarget = hb_itemPutPtr( NULL, (QVector3D *) &target );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ptarget );
    hb_itemRelease( psender );
    hb_itemRelease( ptarget );
  }
}
void Q3DCameraSlots::wrapXRotationChanged( bool isEnabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "wrapXRotationChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pisEnabled = hb_itemPutL( NULL, isEnabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pisEnabled );
    hb_itemRelease( psender );
    hb_itemRelease( pisEnabled );
  }
}
void Q3DCameraSlots::wrapYRotationChanged( bool isEnabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "wrapYRotationChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pisEnabled = hb_itemPutL( NULL, isEnabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pisEnabled );
    hb_itemRelease( psender );
    hb_itemRelease( pisEnabled );
  }
}
void Q3DCameraSlots::xRotationChanged( float rotation )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "xRotationChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM protation = hb_itemPutND( NULL, rotation );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, protation );
    hb_itemRelease( psender );
    hb_itemRelease( protation );
  }
}
void Q3DCameraSlots::yRotationChanged( float rotation )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "yRotationChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM protation = hb_itemPutND( NULL, rotation );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, protation );
    hb_itemRelease( psender );
    hb_itemRelease( protation );
  }
}
void Q3DCameraSlots::zoomLevelChanged( float zoomLevel )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "zoomLevelChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pzoomLevel = hb_itemPutND( NULL, zoomLevel );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pzoomLevel );
    hb_itemRelease( psender );
    hb_itemRelease( pzoomLevel );
  }
}

HB_FUNC( Q3DCAMERA_ONCAMERAPRESETCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DCameraSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "cameraPresetChanged( Q3DCamera::CameraPreset preset )", "cameraPresetChanged( Q3DCamera::CameraPreset preset )" ) );
}

HB_FUNC( Q3DCAMERA_ONMAXZOOMLEVELCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DCameraSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "maxZoomLevelChanged( float zoomLevel )", "maxZoomLevelChanged( float zoomLevel )" ) );
}

HB_FUNC( Q3DCAMERA_ONMINZOOMLEVELCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DCameraSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "minZoomLevelChanged( float zoomLevel )", "minZoomLevelChanged( float zoomLevel )" ) );
}

HB_FUNC( Q3DCAMERA_ONTARGETCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DCameraSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "targetChanged( const QVector3D & target )", "targetChanged( const QVector3D & target )" ) );
}

HB_FUNC( Q3DCAMERA_ONWRAPXROTATIONCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DCameraSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "wrapXRotationChanged( bool isEnabled )", "wrapXRotationChanged( bool isEnabled )" ) );
}

HB_FUNC( Q3DCAMERA_ONWRAPYROTATIONCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DCameraSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "wrapYRotationChanged( bool isEnabled )", "wrapYRotationChanged( bool isEnabled )" ) );
}

HB_FUNC( Q3DCAMERA_ONXROTATIONCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DCameraSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "xRotationChanged( float rotation )", "xRotationChanged( float rotation )" ) );
}

HB_FUNC( Q3DCAMERA_ONYROTATIONCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DCameraSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "yRotationChanged( float rotation )", "yRotationChanged( float rotation )" ) );
}

HB_FUNC( Q3DCAMERA_ONZOOMLEVELCHANGED )
{
  if( s == NULL )
  {
    s = new Q3DCameraSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "zoomLevelChanged( float zoomLevel )", "zoomLevelChanged( float zoomLevel )" ) );
}

