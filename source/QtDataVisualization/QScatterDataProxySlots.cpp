/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QScatterDataProxySlots.h"

static SlotsQScatterDataProxy * s = NULL;

SlotsQScatterDataProxy::SlotsQScatterDataProxy(QObject *parent) : QObject(parent)
{
}

SlotsQScatterDataProxy::~SlotsQScatterDataProxy()
{
}
void SlotsQScatterDataProxy::arrayReset()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "arrayReset()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQScatterDataProxy::itemCountChanged( int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "itemCountChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pcount );
  }
}
void SlotsQScatterDataProxy::itemsAdded( int startIndex, int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "itemsAdded(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstartIndex = hb_itemPutNI( NULL, startIndex );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pstartIndex, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pstartIndex );
    hb_itemRelease( pcount );
  }
}
void SlotsQScatterDataProxy::itemsChanged( int startIndex, int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "itemsChanged(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstartIndex = hb_itemPutNI( NULL, startIndex );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pstartIndex, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pstartIndex );
    hb_itemRelease( pcount );
  }
}
void SlotsQScatterDataProxy::itemsInserted( int startIndex, int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "itemsInserted(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstartIndex = hb_itemPutNI( NULL, startIndex );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pstartIndex, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pstartIndex );
    hb_itemRelease( pcount );
  }
}
void SlotsQScatterDataProxy::itemsRemoved( int startIndex, int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "itemsRemoved(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstartIndex = hb_itemPutNI( NULL, startIndex );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pstartIndex, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pstartIndex );
    hb_itemRelease( pcount );
  }
}
void SlotsQScatterDataProxy::seriesChanged( QScatter3DSeries * series )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "seriesChanged(QScatter3DSeries*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pseries = hb_itemPutPtr( NULL, (QScatter3DSeries *) series );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pseries );
    hb_itemRelease( psender );
    hb_itemRelease( pseries );
  }
}

HB_FUNC( QSCATTERDATAPROXY_ONARRAYRESET )
{
  if( s == NULL )
  {
    s = new SlotsQScatterDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "arrayReset();", "arrayReset();" ) );
}

HB_FUNC( QSCATTERDATAPROXY_ONITEMCOUNTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQScatterDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "itemCountChanged(int)", "itemCountChanged(int)" ) );
}

HB_FUNC( QSCATTERDATAPROXY_ONITEMSADDED )
{
  if( s == NULL )
  {
    s = new SlotsQScatterDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "itemsAdded(int,int)", "itemsAdded(int,int)" ) );
}

HB_FUNC( QSCATTERDATAPROXY_ONITEMSCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQScatterDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "itemsChanged(int,int)", "itemsChanged(int,int)" ) );
}

HB_FUNC( QSCATTERDATAPROXY_ONITEMSINSERTED )
{
  if( s == NULL )
  {
    s = new SlotsQScatterDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "itemsInserted(int,int)", "itemsInserted(int,int)" ) );
}

HB_FUNC( QSCATTERDATAPROXY_ONITEMSREMOVED )
{
  if( s == NULL )
  {
    s = new SlotsQScatterDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "itemsRemoved(int,int)", "itemsRemoved(int,int)" ) );
}

HB_FUNC( QSCATTERDATAPROXY_ONSERIESCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQScatterDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "seriesChanged(QScatter3DSeries*)", "seriesChanged(QScatter3DSeries*)" ) );
}

