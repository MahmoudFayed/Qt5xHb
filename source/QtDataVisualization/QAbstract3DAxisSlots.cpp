/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QAbstract3DAxisSlots.h"

static QAbstract3DAxisSlots * s = NULL;

QAbstract3DAxisSlots::QAbstract3DAxisSlots(QObject *parent) : QObject(parent)
{
}

QAbstract3DAxisSlots::~QAbstract3DAxisSlots()
{
}
void QAbstract3DAxisSlots::autoAdjustRangeChanged( bool autoAdjust )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "autoAdjustRangeChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pautoAdjust = hb_itemPutL( NULL, autoAdjust );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pautoAdjust );
    hb_itemRelease( psender );
    hb_itemRelease( pautoAdjust );
  }
}
void QAbstract3DAxisSlots::labelAutoRotationChanged( float angle )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelAutoRotationChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pangle = hb_itemPutND( NULL, angle );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pangle );
    hb_itemRelease( psender );
    hb_itemRelease( pangle );
  }
}
void QAbstract3DAxisSlots::labelsChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelsChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QAbstract3DAxisSlots::maxChanged( float value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "maxChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void QAbstract3DAxisSlots::minChanged( float value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "minChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void QAbstract3DAxisSlots::orientationChanged( QAbstract3DAxis::AxisOrientation orientation )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "orientationChanged(QAbstract3DAxis::AxisOrientation)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM porientation = hb_itemPutNI( NULL, (int) orientation );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, porientation );
    hb_itemRelease( psender );
    hb_itemRelease( porientation );
  }
}
void QAbstract3DAxisSlots::rangeChanged( float min, float max )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rangeChanged(float,float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmin = hb_itemPutND( NULL, min );
    PHB_ITEM pmax = hb_itemPutND( NULL, max );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pmin, pmax );
    hb_itemRelease( psender );
    hb_itemRelease( pmin );
    hb_itemRelease( pmax );
  }
}
void QAbstract3DAxisSlots::titleChanged( const QString & newTitle )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "titleChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pnewTitle = hb_itemPutC( NULL, QSTRINGTOSTRING(newTitle) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pnewTitle );
    hb_itemRelease( psender );
    hb_itemRelease( pnewTitle );
  }
}
void QAbstract3DAxisSlots::titleFixedChanged( bool fixed )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "titleFixedChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pfixed = hb_itemPutL( NULL, fixed );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pfixed );
    hb_itemRelease( psender );
    hb_itemRelease( pfixed );
  }
}
void QAbstract3DAxisSlots::titleVisibilityChanged( bool visible )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "titleVisibilityChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvisible = hb_itemPutL( NULL, visible );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvisible );
    hb_itemRelease( psender );
    hb_itemRelease( pvisible );
  }
}

HB_FUNC( QABSTRACT3DAXIS_ONAUTOADJUSTRANGECHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "autoAdjustRangeChanged(bool)", "autoAdjustRangeChanged(bool)" ) );
}

HB_FUNC( QABSTRACT3DAXIS_ONLABELAUTOROTATIONCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelAutoRotationChanged(float)", "labelAutoRotationChanged(float)" ) );
}

HB_FUNC( QABSTRACT3DAXIS_ONLABELSCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelsChanged()", "labelsChanged()" ) );
}

HB_FUNC( QABSTRACT3DAXIS_ONMAXCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "maxChanged(float)", "maxChanged(float)" ) );
}

HB_FUNC( QABSTRACT3DAXIS_ONMINCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "minChanged(float)", "minChanged(float)" ) );
}

HB_FUNC( QABSTRACT3DAXIS_ONORIENTATIONCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "orientationChanged(QAbstract3DAxis::AxisOrientation)", "orientationChanged(QAbstract3DAxis::AxisOrientation)" ) );
}

HB_FUNC( QABSTRACT3DAXIS_ONRANGECHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rangeChanged(float,float)", "rangeChanged(float,float)" ) );
}

HB_FUNC( QABSTRACT3DAXIS_ONTITLECHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "titleChanged(QString)", "titleChanged(QString)" ) );
}

HB_FUNC( QABSTRACT3DAXIS_ONTITLEFIXEDCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "titleFixedChanged(bool)", "titleFixedChanged(bool)" ) );
}

HB_FUNC( QABSTRACT3DAXIS_ONTITLEVISIBILITYCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "titleVisibilityChanged(bool)", "titleVisibilityChanged(bool)" ) );
}

