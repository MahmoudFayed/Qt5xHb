/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QAbstract3DGraphSlots.h"

static QAbstract3DGraphSlots * s = NULL;

QAbstract3DGraphSlots::QAbstract3DGraphSlots(QObject *parent) : QObject(parent)
{
}

QAbstract3DGraphSlots::~QAbstract3DGraphSlots()
{
}
void QAbstract3DGraphSlots::activeInputHandlerChanged( QAbstract3DInputHandler * inputHandler )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "activeInputHandlerChanged(QAbstract3DInputHandler*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pinputHandler = hb_itemPutPtr( NULL, (QAbstract3DInputHandler *) inputHandler );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pinputHandler );
    hb_itemRelease( psender );
    hb_itemRelease( pinputHandler );
  }
}
void QAbstract3DGraphSlots::activeThemeChanged( Q3DTheme * theme )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "activeThemeChanged(Q3DTheme*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ptheme = hb_itemPutPtr( NULL, (Q3DTheme *) theme );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ptheme );
    hb_itemRelease( psender );
    hb_itemRelease( ptheme );
  }
}
void QAbstract3DGraphSlots::aspectRatioChanged( qreal ratio )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "aspectRatioChanged(qreal)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pratio = hb_itemPutND( NULL, ratio );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pratio );
    hb_itemRelease( psender );
    hb_itemRelease( pratio );
  }
}
void QAbstract3DGraphSlots::currentFpsChanged( qreal fps )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "currentFpsChanged(qreal)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pfps = hb_itemPutND( NULL, fps );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pfps );
    hb_itemRelease( psender );
    hb_itemRelease( pfps );
  }
}
void QAbstract3DGraphSlots::horizontalAspectRatioChanged( qreal ratio )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "horizontalAspectRatioChanged(qreal)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pratio = hb_itemPutND( NULL, ratio );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pratio );
    hb_itemRelease( psender );
    hb_itemRelease( pratio );
  }
}
void QAbstract3DGraphSlots::localeChanged( const QLocale & locale )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "localeChanged(QLocale)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM plocale = hb_itemPutPtr( NULL, (QLocale *) &locale );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, plocale );
    hb_itemRelease( psender );
    hb_itemRelease( plocale );
  }
}
void QAbstract3DGraphSlots::marginChanged( qreal margin )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "marginChanged(qreal)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmargin = hb_itemPutND( NULL, margin );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmargin );
    hb_itemRelease( psender );
    hb_itemRelease( pmargin );
  }
}
void QAbstract3DGraphSlots::measureFpsChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "measureFpsChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void QAbstract3DGraphSlots::optimizationHintsChanged( QAbstract3DGraph::OptimizationHints hints )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "optimizationHintsChanged(QAbstract3DGraph::OptimizationHints)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM phints = hb_itemPutNI( NULL, (int) hints );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, phints );
    hb_itemRelease( psender );
    hb_itemRelease( phints );
  }
}
void QAbstract3DGraphSlots::orthoProjectionChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "orthoProjectionChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void QAbstract3DGraphSlots::polarChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "polarChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void QAbstract3DGraphSlots::queriedGraphPositionChanged( const QVector3D & data )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "queriedGraphPositionChanged(QVector3D)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdata = hb_itemPutPtr( NULL, (QVector3D *) &data );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pdata );
    hb_itemRelease( psender );
    hb_itemRelease( pdata );
  }
}
void QAbstract3DGraphSlots::radialLabelOffsetChanged( float offset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "radialLabelOffsetChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM poffset = hb_itemPutND( NULL, offset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, poffset );
    hb_itemRelease( psender );
    hb_itemRelease( poffset );
  }
}
void QAbstract3DGraphSlots::reflectionChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "reflectionChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void QAbstract3DGraphSlots::reflectivityChanged( qreal reflectivity )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "reflectivityChanged(qreal)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM preflectivity = hb_itemPutND( NULL, reflectivity );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, preflectivity );
    hb_itemRelease( psender );
    hb_itemRelease( preflectivity );
  }
}
void QAbstract3DGraphSlots::selectedElementChanged( QAbstract3DGraph::ElementType type )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "selectedElementChanged(QAbstract3DGraph::ElementType)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ptype = hb_itemPutNI( NULL, (int) type );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ptype );
    hb_itemRelease( psender );
    hb_itemRelease( ptype );
  }
}
void QAbstract3DGraphSlots::selectionModeChanged( QAbstract3DGraph::SelectionFlags mode )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "selectionModeChanged(QAbstract3DGraph::SelectionFlags)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmode = hb_itemPutNI( NULL, (int) mode );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmode );
    hb_itemRelease( psender );
    hb_itemRelease( pmode );
  }
}
void QAbstract3DGraphSlots::shadowQualityChanged( QAbstract3DGraph::ShadowQuality quality )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "shadowQualityChanged(QAbstract3DGraph::ShadowQuality)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pquality = hb_itemPutNI( NULL, (int) quality );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pquality );
    hb_itemRelease( psender );
    hb_itemRelease( pquality );
  }
}

HB_FUNC( QABSTRACT3DGRAPH_ONACTIVEINPUTHANDLERCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "activeInputHandlerChanged(QAbstract3DInputHandler*)", "activeInputHandlerChanged(QAbstract3DInputHandler*)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONACTIVETHEMECHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "activeThemeChanged(Q3DTheme*)", "activeThemeChanged(Q3DTheme*)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONASPECTRATIOCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "aspectRatioChanged(qreal)", "aspectRatioChanged(qreal)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONCURRENTFPSCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "currentFpsChanged(qreal)", "currentFpsChanged(qreal)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONHORIZONTALASPECTRATIOCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "horizontalAspectRatioChanged(qreal)", "horizontalAspectRatioChanged(qreal)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONLOCALECHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "localeChanged(QLocale)", "localeChanged(QLocale)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONMARGINCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "marginChanged(qreal)", "marginChanged(qreal)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONMEASUREFPSCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "measureFpsChanged(bool)", "measureFpsChanged(bool)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONOPTIMIZATIONHINTSCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "optimizationHintsChanged(QAbstract3DGraph::OptimizationHints)", "optimizationHintsChanged(QAbstract3DGraph::OptimizationHints)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONORTHOPROJECTIONCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "orthoProjectionChanged(bool)", "orthoProjectionChanged(bool)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONPOLARCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "polarChanged(bool)", "polarChanged(bool)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONQUERIEDGRAPHPOSITIONCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "queriedGraphPositionChanged(QVector3D)", "queriedGraphPositionChanged(QVector3D)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONRADIALLABELOFFSETCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "radialLabelOffsetChanged(float)", "radialLabelOffsetChanged(float)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONREFLECTIONCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "reflectionChanged(bool)", "reflectionChanged(bool)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONREFLECTIVITYCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "reflectivityChanged(qreal)", "reflectivityChanged(qreal)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONSELECTEDELEMENTCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "selectedElementChanged(QAbstract3DGraph::ElementType)", "selectedElementChanged(QAbstract3DGraph::ElementType)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONSELECTIONMODECHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "selectionModeChanged(QAbstract3DGraph::SelectionFlags)", "selectionModeChanged(QAbstract3DGraph::SelectionFlags)" ) );
}

HB_FUNC( QABSTRACT3DGRAPH_ONSHADOWQUALITYCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstract3DGraphSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "shadowQualityChanged(QAbstract3DGraph::ShadowQuality)", "shadowQualityChanged(QAbstract3DGraph::ShadowQuality)" ) );
}

