/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QAbstract3DSeriesSlots.h"

static SlotsQAbstract3DSeries * s = NULL;

SlotsQAbstract3DSeries::SlotsQAbstract3DSeries(QObject *parent) : QObject(parent)
{
}

SlotsQAbstract3DSeries::~SlotsQAbstract3DSeries()
{
}
void SlotsQAbstract3DSeries::baseColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "baseColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQAbstract3DSeries::baseGradientChanged( const QLinearGradient & gradient )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "baseGradientChanged(QLinearGradient)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pgradient = hb_itemPutPtr( NULL, (QLinearGradient *) &gradient );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pgradient );
    hb_itemRelease( psender );
    hb_itemRelease( pgradient );
  }
}
void SlotsQAbstract3DSeries::colorStyleChanged( Q3DTheme::ColorStyle style )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "colorStyleChanged(Q3DTheme::ColorStyle)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstyle = hb_itemPutNI( NULL, (int) style );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pstyle );
    hb_itemRelease( psender );
    hb_itemRelease( pstyle );
  }
}
void SlotsQAbstract3DSeries::itemLabelChanged( const QString & label )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "itemLabelChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM plabel = hb_itemPutC( NULL, QSTRINGTOSTRING(label) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, plabel );
    hb_itemRelease( psender );
    hb_itemRelease( plabel );
  }
}
void SlotsQAbstract3DSeries::itemLabelFormatChanged( const QString & format )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "itemLabelFormatChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pformat = hb_itemPutC( NULL, QSTRINGTOSTRING(format) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pformat );
    hb_itemRelease( psender );
    hb_itemRelease( pformat );
  }
}
void SlotsQAbstract3DSeries::itemLabelVisibilityChanged( bool visible )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "itemLabelVisibilityChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvisible = hb_itemPutL( NULL, visible );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvisible );
    hb_itemRelease( psender );
    hb_itemRelease( pvisible );
  }
}
void SlotsQAbstract3DSeries::meshChanged( QAbstract3DSeries::Mesh mesh )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "meshChanged(QAbstract3DSeries::Mesh)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmesh = hb_itemPutNI( NULL, (int) mesh );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmesh );
    hb_itemRelease( psender );
    hb_itemRelease( pmesh );
  }
}
void SlotsQAbstract3DSeries::meshRotationChanged( const QQuaternion & rotation )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "meshRotationChanged(QQuaternion)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM protation = hb_itemPutPtr( NULL, (QQuaternion *) &rotation );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, protation );
    hb_itemRelease( psender );
    hb_itemRelease( protation );
  }
}
void SlotsQAbstract3DSeries::meshSmoothChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "meshSmoothChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void SlotsQAbstract3DSeries::multiHighlightColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "multiHighlightColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQAbstract3DSeries::multiHighlightGradientChanged( const QLinearGradient & gradient )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "multiHighlightGradientChanged(QLinearGradient)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pgradient = hb_itemPutPtr( NULL, (QLinearGradient *) &gradient );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pgradient );
    hb_itemRelease( psender );
    hb_itemRelease( pgradient );
  }
}
void SlotsQAbstract3DSeries::nameChanged( const QString & name )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "nameChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pname = hb_itemPutC( NULL, QSTRINGTOSTRING(name) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pname );
    hb_itemRelease( psender );
    hb_itemRelease( pname );
  }
}
void SlotsQAbstract3DSeries::singleHighlightColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "singleHighlightColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQAbstract3DSeries::singleHighlightGradientChanged( const QLinearGradient & gradient )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "singleHighlightGradientChanged(QLinearGradient)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pgradient = hb_itemPutPtr( NULL, (QLinearGradient *) &gradient );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pgradient );
    hb_itemRelease( psender );
    hb_itemRelease( pgradient );
  }
}
void SlotsQAbstract3DSeries::userDefinedMeshChanged( const QString & fileName )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "userDefinedMeshChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pfileName = hb_itemPutC( NULL, QSTRINGTOSTRING(fileName) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pfileName );
    hb_itemRelease( psender );
    hb_itemRelease( pfileName );
  }
}
void SlotsQAbstract3DSeries::visibilityChanged( bool visible )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "visibilityChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvisible = hb_itemPutL( NULL, visible );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvisible );
    hb_itemRelease( psender );
    hb_itemRelease( pvisible );
  }
}

HB_FUNC( QABSTRACT3DSERIES_ONBASECOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "baseColorChanged(QColor)", "baseColorChanged(QColor)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONBASEGRADIENTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "baseGradientChanged(QLinearGradient)", "baseGradientChanged(QLinearGradient)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONCOLORSTYLECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "colorStyleChanged(Q3DTheme::ColorStyle)", "colorStyleChanged(Q3DTheme::ColorStyle)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONITEMLABELCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "itemLabelChanged(QString)", "itemLabelChanged(QString)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONITEMLABELFORMATCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "itemLabelFormatChanged(QString)", "itemLabelFormatChanged(QString)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONITEMLABELVISIBILITYCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "itemLabelVisibilityChanged(bool)", "itemLabelVisibilityChanged(bool)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONMESHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "meshChanged(QAbstract3DSeries::Mesh)", "meshChanged(QAbstract3DSeries::Mesh)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONMESHROTATIONCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "meshRotationChanged(QQuaternion)", "meshRotationChanged(QQuaternion)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONMESHSMOOTHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "meshSmoothChanged(bool)", "meshSmoothChanged(bool)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONMULTIHIGHLIGHTCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "multiHighlightColorChanged(QColor)", "multiHighlightColorChanged(QColor)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONMULTIHIGHLIGHTGRADIENTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "multiHighlightGradientChanged(QLinearGradient)", "multiHighlightGradientChanged(QLinearGradient)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONNAMECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "nameChanged(QString)", "nameChanged(QString)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONSINGLEHIGHLIGHTCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "singleHighlightColorChanged(QColor)", "singleHighlightColorChanged(QColor)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONSINGLEHIGHLIGHTGRADIENTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "singleHighlightGradientChanged(QLinearGradient)", "singleHighlightGradientChanged(QLinearGradient)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONUSERDEFINEDMESHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "userDefinedMeshChanged(QString)", "userDefinedMeshChanged(QString)" ) );
}

HB_FUNC( QABSTRACT3DSERIES_ONVISIBILITYCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstract3DSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "visibilityChanged(bool)", "visibilityChanged(bool)" ) );
}

