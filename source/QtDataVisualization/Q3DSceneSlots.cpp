/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "Q3DSceneSlots.h"

static SlotsQ3DScene * s = NULL;

SlotsQ3DScene::SlotsQ3DScene(QObject *parent) : QObject(parent)
{
}

SlotsQ3DScene::~SlotsQ3DScene()
{
}
void SlotsQ3DScene::activeCameraChanged( Q3DCamera * camera )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "activeCameraChanged(Q3DCamera*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcamera = hb_itemPutPtr( NULL, (Q3DCamera *) camera );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcamera );
    hb_itemRelease( psender );
    hb_itemRelease( pcamera );
  }
}
void SlotsQ3DScene::activeLightChanged( Q3DLight * light )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "activeLightChanged(Q3DLight*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM plight = hb_itemPutPtr( NULL, (Q3DLight *) light );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, plight );
    hb_itemRelease( psender );
    hb_itemRelease( plight );
  }
}
void SlotsQ3DScene::devicePixelRatioChanged( float pixelRatio )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "devicePixelRatioChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ppixelRatio = hb_itemPutND( NULL, pixelRatio );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ppixelRatio );
    hb_itemRelease( psender );
    hb_itemRelease( ppixelRatio );
  }
}
void SlotsQ3DScene::graphPositionQueryChanged( const QPoint & position )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "graphPositionQueryChanged(QPoint)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pposition = hb_itemPutPtr( NULL, (QPoint *) &position );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pposition );
    hb_itemRelease( psender );
    hb_itemRelease( pposition );
  }
}
void SlotsQ3DScene::primarySubViewportChanged( const QRect & subViewport )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "primarySubViewportChanged(QRect)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM psubViewport = hb_itemPutPtr( NULL, (QRect *) &subViewport );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, psubViewport );
    hb_itemRelease( psender );
    hb_itemRelease( psubViewport );
  }
}
void SlotsQ3DScene::secondarySubviewOnTopChanged( bool isSecondaryOnTop )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "secondarySubviewOnTopChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pisSecondaryOnTop = hb_itemPutL( NULL, isSecondaryOnTop );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pisSecondaryOnTop );
    hb_itemRelease( psender );
    hb_itemRelease( pisSecondaryOnTop );
  }
}
void SlotsQ3DScene::secondarySubViewportChanged( const QRect & subViewport )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "secondarySubViewportChanged(QRect)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM psubViewport = hb_itemPutPtr( NULL, (QRect *) &subViewport );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, psubViewport );
    hb_itemRelease( psender );
    hb_itemRelease( psubViewport );
  }
}
void SlotsQ3DScene::selectionQueryPositionChanged( const QPoint & position )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "selectionQueryPositionChanged(QPoint)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pposition = hb_itemPutPtr( NULL, (QPoint *) &position );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pposition );
    hb_itemRelease( psender );
    hb_itemRelease( pposition );
  }
}
void SlotsQ3DScene::slicingActiveChanged( bool isSlicingActive )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "slicingActiveChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pisSlicingActive = hb_itemPutL( NULL, isSlicingActive );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pisSlicingActive );
    hb_itemRelease( psender );
    hb_itemRelease( pisSlicingActive );
  }
}
void SlotsQ3DScene::viewportChanged( const QRect & viewport )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "viewportChanged(QRect)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pviewport = hb_itemPutPtr( NULL, (QRect *) &viewport );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pviewport );
    hb_itemRelease( psender );
    hb_itemRelease( pviewport );
  }
}

HB_FUNC( Q3DSCENE_ONACTIVECAMERACHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScene( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "activeCameraChanged(Q3DCamera*)", "activeCameraChanged(Q3DCamera*)" ) );
}

HB_FUNC( Q3DSCENE_ONACTIVELIGHTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScene( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "activeLightChanged(Q3DLight*)", "activeLightChanged(Q3DLight*)" ) );
}

HB_FUNC( Q3DSCENE_ONDEVICEPIXELRATIOCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScene( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "devicePixelRatioChanged(float)", "devicePixelRatioChanged(float)" ) );
}

HB_FUNC( Q3DSCENE_ONGRAPHPOSITIONQUERYCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScene( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "graphPositionQueryChanged(QPoint)", "graphPositionQueryChanged(QPoint)" ) );
}

HB_FUNC( Q3DSCENE_ONPRIMARYSUBVIEWPORTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScene( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "primarySubViewportChanged(QRect)", "primarySubViewportChanged(QRect)" ) );
}

HB_FUNC( Q3DSCENE_ONSECONDARYSUBVIEWONTOPCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScene( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "secondarySubviewOnTopChanged(bool)", "secondarySubviewOnTopChanged(bool)" ) );
}

HB_FUNC( Q3DSCENE_ONSECONDARYSUBVIEWPORTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScene( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "secondarySubViewportChanged(QRect)", "secondarySubViewportChanged(QRect)" ) );
}

HB_FUNC( Q3DSCENE_ONSELECTIONQUERYPOSITIONCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScene( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "selectionQueryPositionChanged(QPoint)", "selectionQueryPositionChanged(QPoint)" ) );
}

HB_FUNC( Q3DSCENE_ONSLICINGACTIVECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScene( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "slicingActiveChanged(bool)", "slicingActiveChanged(bool)" ) );
}

HB_FUNC( Q3DSCENE_ONVIEWPORTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DScene( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "viewportChanged(QRect)", "viewportChanged(QRect)" ) );
}

