/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QHeightMapSurfaceDataProxySlots.h"

static SlotsQHeightMapSurfaceDataProxy * s = NULL;

SlotsQHeightMapSurfaceDataProxy::SlotsQHeightMapSurfaceDataProxy(QObject *parent) : QObject(parent)
{
}

SlotsQHeightMapSurfaceDataProxy::~SlotsQHeightMapSurfaceDataProxy()
{
}
void SlotsQHeightMapSurfaceDataProxy::heightMapChanged( const QImage & image )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "heightMapChanged(QImage)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pimage = hb_itemPutPtr( NULL, (QImage *) &image );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pimage );
    hb_itemRelease( psender );
    hb_itemRelease( pimage );
  }
}
void SlotsQHeightMapSurfaceDataProxy::heightMapFileChanged( const QString & filename )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "heightMapFileChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pfilename = hb_itemPutC( NULL, QSTRINGTOSTRING(filename) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pfilename );
    hb_itemRelease( psender );
    hb_itemRelease( pfilename );
  }
}
void SlotsQHeightMapSurfaceDataProxy::maxXValueChanged( float value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "maxXValueChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void SlotsQHeightMapSurfaceDataProxy::maxZValueChanged( float value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "maxZValueChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void SlotsQHeightMapSurfaceDataProxy::minXValueChanged( float value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "minXValueChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
void SlotsQHeightMapSurfaceDataProxy::minZValueChanged( float value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "minZValueChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}

HB_FUNC( QHEIGHTMAPSURFACEDATAPROXY_ONHEIGHTMAPCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQHeightMapSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "heightMapChanged(QImage)", "heightMapChanged(QImage)" ) );
}

HB_FUNC( QHEIGHTMAPSURFACEDATAPROXY_ONHEIGHTMAPFILECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQHeightMapSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "heightMapFileChanged(QString)", "heightMapFileChanged(QString)" ) );
}

HB_FUNC( QHEIGHTMAPSURFACEDATAPROXY_ONMAXXVALUECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQHeightMapSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "maxXValueChanged(float)", "maxXValueChanged(float)" ) );
}

HB_FUNC( QHEIGHTMAPSURFACEDATAPROXY_ONMAXZVALUECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQHeightMapSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "maxZValueChanged(float)", "maxZValueChanged(float)" ) );
}

HB_FUNC( QHEIGHTMAPSURFACEDATAPROXY_ONMINXVALUECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQHeightMapSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "minXValueChanged(float)", "minXValueChanged(float)" ) );
}

HB_FUNC( QHEIGHTMAPSURFACEDATAPROXY_ONMINZVALUECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQHeightMapSurfaceDataProxy( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "minZValueChanged(float)", "minZValueChanged(float)" ) );
}

