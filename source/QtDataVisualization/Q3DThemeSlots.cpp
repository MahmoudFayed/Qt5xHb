/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "Q3DThemeSlots.h"

static SlotsQ3DTheme * s = NULL;

SlotsQ3DTheme::SlotsQ3DTheme(QObject *parent) : QObject(parent)
{
}

SlotsQ3DTheme::~SlotsQ3DTheme()
{
}
void SlotsQ3DTheme::ambientLightStrengthChanged( float strength )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "ambientLightStrengthChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstrength = hb_itemPutND( NULL, strength );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pstrength );
    hb_itemRelease( psender );
    hb_itemRelease( pstrength );
  }
}
void SlotsQ3DTheme::backgroundColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "backgroundColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQ3DTheme::backgroundEnabledChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "backgroundEnabledChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void SlotsQ3DTheme::baseColorsChanged( const QList<QColor> & colors )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "baseColorsChanged(QList<QColor>)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_DYNS pDynSym = hb_dynsymFindName( "QCOLOR" );
    PHB_ITEM pcolors = hb_itemArrayNew(0);
    int i;
    for(i=0;i<colors.count();i++)
    {
      if( pDynSym )
      {
        hb_vmPushDynSym( pDynSym );
        hb_vmPushNil();
        hb_vmDo( 0 );
        PHB_ITEM pTempObject = hb_itemNew( NULL );
        hb_itemCopy( pTempObject, hb_stackReturnItem() );
        PHB_ITEM pTempItem = hb_itemNew( NULL );
        hb_itemPutPtr( pTempItem, (QColor *) new QColor ( colors [i] ) );
        hb_objSendMsg( pTempObject, "NEWFROMPOINTER", 1, pTempItem );
        hb_arrayAddForward( pcolors, pTempObject );
        hb_itemRelease( pTempObject );
        hb_itemRelease( pTempItem );
      }
      else
      {
        hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QCOLOR", HB_ERR_ARGS_BASEPARAMS );
      }
    }
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolors );
    hb_itemRelease( psender );
    hb_itemRelease( pcolors );
  }
}
void SlotsQ3DTheme::baseGradientsChanged( const QList<QLinearGradient> & gradients )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "baseGradientsChanged(QList<QLinearGradient>)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_DYNS pDynSym = hb_dynsymFindName( "QLINEARGRADIENT" );
    PHB_ITEM pgradients = hb_itemArrayNew(0);
    int i;
    for(i=0;i<gradients.count();i++)
    {
      if( pDynSym )
      {
        hb_vmPushDynSym( pDynSym );
        hb_vmPushNil();
        hb_vmDo( 0 );
        PHB_ITEM pTempObject = hb_itemNew( NULL );
        hb_itemCopy( pTempObject, hb_stackReturnItem() );
        PHB_ITEM pTempItem = hb_itemNew( NULL );
        hb_itemPutPtr( pTempItem, (QLinearGradient *) new QLinearGradient ( gradients [i] ) );
        hb_objSendMsg( pTempObject, "NEWFROMPOINTER", 1, pTempItem );
        hb_arrayAddForward( pgradients, pTempObject );
        hb_itemRelease( pTempObject );
        hb_itemRelease( pTempItem );
      }
      else
      {
        hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QLINEARGRADIENT", HB_ERR_ARGS_BASEPARAMS );
      }
    }
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pgradients );
    hb_itemRelease( psender );
    hb_itemRelease( pgradients );
  }
}
void SlotsQ3DTheme::colorStyleChanged( Q3DTheme::ColorStyle style )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "colorStyleChanged(Q3DTheme::ColorStyle)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstyle = hb_itemPutNI( NULL, (int) style );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pstyle );
    hb_itemRelease( psender );
    hb_itemRelease( pstyle );
  }
}
void SlotsQ3DTheme::fontChanged( const QFont & font )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "fontChanged(QFont)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pfont = hb_itemPutPtr( NULL, (QFont *) &font );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pfont );
    hb_itemRelease( psender );
    hb_itemRelease( pfont );
  }
}
void SlotsQ3DTheme::gridEnabledChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "gridEnabledChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void SlotsQ3DTheme::gridLineColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "gridLineColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQ3DTheme::highlightLightStrengthChanged( float strength )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "highlightLightStrengthChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstrength = hb_itemPutND( NULL, strength );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pstrength );
    hb_itemRelease( psender );
    hb_itemRelease( pstrength );
  }
}
void SlotsQ3DTheme::labelBackgroundColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelBackgroundColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQ3DTheme::labelBackgroundEnabledChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelBackgroundEnabledChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void SlotsQ3DTheme::labelBorderEnabledChanged( bool enabled )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelBorderEnabledChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM penabled = hb_itemPutL( NULL, enabled );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, penabled );
    hb_itemRelease( psender );
    hb_itemRelease( penabled );
  }
}
void SlotsQ3DTheme::labelTextColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelTextColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQ3DTheme::lightColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "lightColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQ3DTheme::lightStrengthChanged( float strength )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "lightStrengthChanged(float)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstrength = hb_itemPutND( NULL, strength );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pstrength );
    hb_itemRelease( psender );
    hb_itemRelease( pstrength );
  }
}
void SlotsQ3DTheme::multiHighlightColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "multiHighlightColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQ3DTheme::multiHighlightGradientChanged( const QLinearGradient & gradient )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "multiHighlightGradientChanged(QLinearGradient)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pgradient = hb_itemPutPtr( NULL, (QLinearGradient *) &gradient );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pgradient );
    hb_itemRelease( psender );
    hb_itemRelease( pgradient );
  }
}
void SlotsQ3DTheme::singleHighlightColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "singleHighlightColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQ3DTheme::singleHighlightGradientChanged( const QLinearGradient & gradient )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "singleHighlightGradientChanged(QLinearGradient)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pgradient = hb_itemPutPtr( NULL, (QLinearGradient *) &gradient );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pgradient );
    hb_itemRelease( psender );
    hb_itemRelease( pgradient );
  }
}
void SlotsQ3DTheme::typeChanged( Q3DTheme::Theme themeType )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "typeChanged(Q3DTheme::Theme)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pthemeType = hb_itemPutNI( NULL, (int) themeType );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pthemeType );
    hb_itemRelease( psender );
    hb_itemRelease( pthemeType );
  }
}
void SlotsQ3DTheme::windowColorChanged( const QColor & color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "windowColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}

HB_FUNC( Q3DTHEME_ONAMBIENTLIGHTSTRENGTHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "ambientLightStrengthChanged(float)", "ambientLightStrengthChanged(float)" ) );
}

HB_FUNC( Q3DTHEME_ONBACKGROUNDCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "backgroundColorChanged(QColor)", "backgroundColorChanged(QColor)" ) );
}

HB_FUNC( Q3DTHEME_ONBACKGROUNDENABLEDCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "backgroundEnabledChanged(bool)", "backgroundEnabledChanged(bool)" ) );
}

HB_FUNC( Q3DTHEME_ONBASECOLORSCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "baseColorsChanged(QList<QColor>)", "baseColorsChanged(QList<QColor>)" ) );
}

HB_FUNC( Q3DTHEME_ONBASEGRADIENTSCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "baseGradientsChanged(QList<QLinearGradient>)", "baseGradientsChanged(QList<QLinearGradient>)" ) );
}

HB_FUNC( Q3DTHEME_ONCOLORSTYLECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "colorStyleChanged(Q3DTheme::ColorStyle)", "colorStyleChanged(Q3DTheme::ColorStyle)" ) );
}

HB_FUNC( Q3DTHEME_ONFONTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "fontChanged(QFont)", "fontChanged(QFont)" ) );
}

HB_FUNC( Q3DTHEME_ONGRIDENABLEDCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "gridEnabledChanged(bool)", "gridEnabledChanged(bool)" ) );
}

HB_FUNC( Q3DTHEME_ONGRIDLINECOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "gridLineColorChanged(QColor)", "gridLineColorChanged(QColor)" ) );
}

HB_FUNC( Q3DTHEME_ONHIGHLIGHTLIGHTSTRENGTHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "highlightLightStrengthChanged(float)", "highlightLightStrengthChanged(float)" ) );
}

HB_FUNC( Q3DTHEME_ONLABELBACKGROUNDCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelBackgroundColorChanged(QColor)", "labelBackgroundColorChanged(QColor)" ) );
}

HB_FUNC( Q3DTHEME_ONLABELBACKGROUNDENABLEDCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelBackgroundEnabledChanged(bool)", "labelBackgroundEnabledChanged(bool)" ) );
}

HB_FUNC( Q3DTHEME_ONLABELBORDERENABLEDCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelBorderEnabledChanged(bool)", "labelBorderEnabledChanged(bool)" ) );
}

HB_FUNC( Q3DTHEME_ONLABELTEXTCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelTextColorChanged(QColor)", "labelTextColorChanged(QColor)" ) );
}

HB_FUNC( Q3DTHEME_ONLIGHTCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "lightColorChanged(QColor)", "lightColorChanged(QColor)" ) );
}

HB_FUNC( Q3DTHEME_ONLIGHTSTRENGTHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "lightStrengthChanged(float)", "lightStrengthChanged(float)" ) );
}

HB_FUNC( Q3DTHEME_ONMULTIHIGHLIGHTCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "multiHighlightColorChanged(QColor)", "multiHighlightColorChanged(QColor)" ) );
}

HB_FUNC( Q3DTHEME_ONMULTIHIGHLIGHTGRADIENTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "multiHighlightGradientChanged(QLinearGradient)", "multiHighlightGradientChanged(QLinearGradient)" ) );
}

HB_FUNC( Q3DTHEME_ONSINGLEHIGHLIGHTCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "singleHighlightColorChanged(QColor)", "singleHighlightColorChanged(QColor)" ) );
}

HB_FUNC( Q3DTHEME_ONSINGLEHIGHLIGHTGRADIENTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "singleHighlightGradientChanged(QLinearGradient)", "singleHighlightGradientChanged(QLinearGradient)" ) );
}

HB_FUNC( Q3DTHEME_ONTYPECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "typeChanged(Q3DTheme::Theme)", "typeChanged(Q3DTheme::Theme)" ) );
}

HB_FUNC( Q3DTHEME_ONWINDOWCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQ3DTheme( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "windowColorChanged(QColor)", "windowColorChanged(QColor)" ) );
}

