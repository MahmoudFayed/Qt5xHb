/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QCustom3DItemSlots.h"

static SlotsQCustom3DItem * s = NULL;

SlotsQCustom3DItem::SlotsQCustom3DItem(QObject *parent) : QObject(parent)
{
}

SlotsQCustom3DItem::~SlotsQCustom3DItem()
{
}
void SlotsQCustom3DItem::meshFileChanged( const QString & meshFile )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "meshFileChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmeshFile = hb_itemPutC( NULL, QSTRINGTOSTRING(meshFile) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmeshFile );
    hb_itemRelease( psender );
    hb_itemRelease( pmeshFile );
  }
}
void SlotsQCustom3DItem::positionAbsoluteChanged( bool positionAbsolute )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "positionAbsoluteChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ppositionAbsolute = hb_itemPutL( NULL, positionAbsolute );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ppositionAbsolute );
    hb_itemRelease( psender );
    hb_itemRelease( ppositionAbsolute );
  }
}
void SlotsQCustom3DItem::positionChanged( const QVector3D & position )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "positionChanged(QVector3D)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pposition = hb_itemPutPtr( NULL, (QVector3D *) &position );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pposition );
    hb_itemRelease( psender );
    hb_itemRelease( pposition );
  }
}
void SlotsQCustom3DItem::rotationChanged( const QQuaternion & rotation )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rotationChanged(QQuaternion)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM protation = hb_itemPutPtr( NULL, (QQuaternion *) &rotation );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, protation );
    hb_itemRelease( psender );
    hb_itemRelease( protation );
  }
}
void SlotsQCustom3DItem::scalingAbsoluteChanged( bool scalingAbsolute )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "scalingAbsoluteChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pscalingAbsolute = hb_itemPutL( NULL, scalingAbsolute );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pscalingAbsolute );
    hb_itemRelease( psender );
    hb_itemRelease( pscalingAbsolute );
  }
}
void SlotsQCustom3DItem::scalingChanged( const QVector3D & scaling )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "scalingChanged(QVector3D)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pscaling = hb_itemPutPtr( NULL, (QVector3D *) &scaling );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pscaling );
    hb_itemRelease( psender );
    hb_itemRelease( pscaling );
  }
}
void SlotsQCustom3DItem::shadowCastingChanged( bool shadowCasting )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "shadowCastingChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pshadowCasting = hb_itemPutL( NULL, shadowCasting );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pshadowCasting );
    hb_itemRelease( psender );
    hb_itemRelease( pshadowCasting );
  }
}
void SlotsQCustom3DItem::textureFileChanged( const QString & textureFile )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "textureFileChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ptextureFile = hb_itemPutC( NULL, QSTRINGTOSTRING(textureFile) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ptextureFile );
    hb_itemRelease( psender );
    hb_itemRelease( ptextureFile );
  }
}
void SlotsQCustom3DItem::visibleChanged( bool visible )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "visibleChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvisible = hb_itemPutL( NULL, visible );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvisible );
    hb_itemRelease( psender );
    hb_itemRelease( pvisible );
  }
}

HB_FUNC( QCUSTOM3DITEM_ONMESHFILECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DItem( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "meshFileChanged(QString)", "meshFileChanged(QString)" ) );
}

HB_FUNC( QCUSTOM3DITEM_ONPOSITIONABSOLUTECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DItem( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "positionAbsoluteChanged(bool)", "positionAbsoluteChanged(bool)" ) );
}

HB_FUNC( QCUSTOM3DITEM_ONPOSITIONCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DItem( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "positionChanged(QVector3D)", "positionChanged(QVector3D)" ) );
}

HB_FUNC( QCUSTOM3DITEM_ONROTATIONCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DItem( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rotationChanged(QQuaternion)", "rotationChanged(QQuaternion)" ) );
}

HB_FUNC( QCUSTOM3DITEM_ONSCALINGABSOLUTECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DItem( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "scalingAbsoluteChanged(bool)", "scalingAbsoluteChanged(bool)" ) );
}

HB_FUNC( QCUSTOM3DITEM_ONSCALINGCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DItem( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "scalingChanged(QVector3D)", "scalingChanged(QVector3D)" ) );
}

HB_FUNC( QCUSTOM3DITEM_ONSHADOWCASTINGCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DItem( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "shadowCastingChanged(bool)", "shadowCastingChanged(bool)" ) );
}

HB_FUNC( QCUSTOM3DITEM_ONTEXTUREFILECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DItem( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "textureFileChanged(QString)", "textureFileChanged(QString)" ) );
}

HB_FUNC( QCUSTOM3DITEM_ONVISIBLECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQCustom3DItem( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "visibleChanged(bool)", "visibleChanged(bool)" ) );
}

