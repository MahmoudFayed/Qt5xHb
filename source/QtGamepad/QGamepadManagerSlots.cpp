/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QGamepadManagerSlots.h"

static SlotsQGamepadManager * s = NULL;

SlotsQGamepadManager::SlotsQGamepadManager(QObject *parent) : QObject(parent)
{
}

SlotsQGamepadManager::~SlotsQGamepadManager()
{
}
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadManager::axisConfigured( int deviceId, QGamepadManager::GamepadAxis axis )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "axisConfigured(int,QGamepadManager::GamepadAxis)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdeviceId = hb_itemPutNI( NULL, deviceId );
    PHB_ITEM paxis = hb_itemPutNI( NULL, (int) axis );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pdeviceId, paxis );
    hb_itemRelease( psender );
    hb_itemRelease( pdeviceId );
    hb_itemRelease( paxis );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadManager::buttonConfigured( int deviceId, QGamepadManager::GamepadButton button )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonConfigured(int,QGamepadManager::GamepadButton)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdeviceId = hb_itemPutNI( NULL, deviceId );
    PHB_ITEM pbutton = hb_itemPutNI( NULL, (int) button );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pdeviceId, pbutton );
    hb_itemRelease( psender );
    hb_itemRelease( pdeviceId );
    hb_itemRelease( pbutton );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadManager::configurationCanceled( int deviceId )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "configurationCanceled(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdeviceId = hb_itemPutNI( NULL, deviceId );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pdeviceId );
    hb_itemRelease( psender );
    hb_itemRelease( pdeviceId );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadManager::connectedGamepadsChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "connectedGamepadsChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadManager::gamepadAxisEvent( int deviceId, QGamepadManager::GamepadAxis axis, double value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "gamepadAxisEvent(int,QGamepadManager::GamepadAxis,double)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdeviceId = hb_itemPutNI( NULL, deviceId );
    PHB_ITEM paxis = hb_itemPutNI( NULL, (int) axis );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 4, psender, pdeviceId, paxis, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pdeviceId );
    hb_itemRelease( paxis );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadManager::gamepadButtonPressEvent( int deviceId, QGamepadManager::GamepadButton button, double value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "gamepadButtonPressEvent(int,QGamepadManager::GamepadButton,double)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdeviceId = hb_itemPutNI( NULL, deviceId );
    PHB_ITEM pbutton = hb_itemPutNI( NULL, (int) button );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 4, psender, pdeviceId, pbutton, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pdeviceId );
    hb_itemRelease( pbutton );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadManager::gamepadButtonReleaseEvent( int deviceId, QGamepadManager::GamepadButton button )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "gamepadButtonReleaseEvent(int,QGamepadManager::GamepadButton)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdeviceId = hb_itemPutNI( NULL, deviceId );
    PHB_ITEM pbutton = hb_itemPutNI( NULL, (int) button );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pdeviceId, pbutton );
    hb_itemRelease( psender );
    hb_itemRelease( pdeviceId );
    hb_itemRelease( pbutton );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadManager::gamepadConnected( int deviceId )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "gamepadConnected(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdeviceId = hb_itemPutNI( NULL, deviceId );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pdeviceId );
    hb_itemRelease( psender );
    hb_itemRelease( pdeviceId );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadManager::gamepadDisconnected( int deviceId )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "gamepadDisconnected(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdeviceId = hb_itemPutNI( NULL, deviceId );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pdeviceId );
    hb_itemRelease( psender );
    hb_itemRelease( pdeviceId );
  }
}
#endif

HB_FUNC( QGAMEPADMANAGER_ONAXISCONFIGURED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadManager( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "axisConfigured(int,QGamepadManager::GamepadAxis)", "axisConfigured(int,QGamepadManager::GamepadAxis)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADMANAGER_ONBUTTONCONFIGURED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadManager( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonConfigured(int,QGamepadManager::GamepadButton)", "buttonConfigured(int,QGamepadManager::GamepadButton)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADMANAGER_ONCONFIGURATIONCANCELED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadManager( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "configurationCanceled(int)", "configurationCanceled(int)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADMANAGER_ONCONNECTEDGAMEPADSCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadManager( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "connectedGamepadsChanged()", "connectedGamepadsChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADMANAGER_ONGAMEPADAXISEVENT )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadManager( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "gamepadAxisEvent(int,QGamepadManager::GamepadAxis,double)", "gamepadAxisEvent(int,QGamepadManager::GamepadAxis,double)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADMANAGER_ONGAMEPADBUTTONPRESSEVENT )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadManager( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "gamepadButtonPressEvent(int,QGamepadManager::GamepadButton,double)", "gamepadButtonPressEvent(int,QGamepadManager::GamepadButton,double)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADMANAGER_ONGAMEPADBUTTONRELEASEEVENT )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadManager( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "gamepadButtonReleaseEvent(int,QGamepadManager::GamepadButton)", "gamepadButtonReleaseEvent(int,QGamepadManager::GamepadButton)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADMANAGER_ONGAMEPADCONNECTED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadManager( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "gamepadConnected(int)", "gamepadConnected(int)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADMANAGER_ONGAMEPADDISCONNECTED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadManager( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "gamepadDisconnected(int)", "gamepadDisconnected(int)" ) );
#else
  hb_retl( false );
#endif
}

