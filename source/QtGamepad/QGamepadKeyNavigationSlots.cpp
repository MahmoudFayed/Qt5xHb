/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QGamepadKeyNavigationSlots.h"

static SlotsQGamepadKeyNavigation * s = NULL;

SlotsQGamepadKeyNavigation::SlotsQGamepadKeyNavigation(QObject *parent) : QObject(parent)
{
}

SlotsQGamepadKeyNavigation::~SlotsQGamepadKeyNavigation()
{
}
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::activeChanged( bool isActive )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "activeChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pisActive = hb_itemPutL( NULL, isActive );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pisActive );
    hb_itemRelease( psender );
    hb_itemRelease( pisActive );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::gamepadChanged( QGamepad * gamepad )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "gamepadChanged(QGamepad*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pgamepad = hb_itemPutPtr( NULL, (QGamepad *) gamepad );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pgamepad );
    hb_itemRelease( psender );
    hb_itemRelease( pgamepad );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::upKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "upKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::downKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "downKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::leftKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "leftKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::rightKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rightKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonAKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonAKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonBKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonBKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonXKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonXKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonYKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonYKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonSelectKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonSelectKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonStartKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonStartKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonGuideKeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonGuideKeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonL1KeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonL1KeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonR1KeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonR1KeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonL2KeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonL2KeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonR2KeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonR2KeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonL3KeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonL3KeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepadKeyNavigation::buttonR3KeyChanged( Qt::Key key )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonR3KeyChanged(Qt::Key)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pkey = hb_itemPutNI( NULL, (int) key );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pkey );
    hb_itemRelease( psender );
    hb_itemRelease( pkey );
  }
}
#endif

HB_FUNC( QGAMEPADKEYNAVIGATION_ONACTIVECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "activeChanged(bool)", "activeChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONGAMEPADCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "gamepadChanged(QGamepad*)", "gamepadChanged(QGamepad*)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONUPKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "upKeyChanged(Qt::Key)", "upKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONDOWNKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "downKeyChanged(Qt::Key)", "downKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONLEFTKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "leftKeyChanged(Qt::Key)", "leftKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONRIGHTKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rightKeyChanged(Qt::Key)", "rightKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONAKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonAKeyChanged(Qt::Key)", "buttonAKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONBKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonBKeyChanged(Qt::Key)", "buttonBKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONXKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonXKeyChanged(Qt::Key)", "buttonXKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONYKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonYKeyChanged(Qt::Key)", "buttonYKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONSELECTKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonSelectKeyChanged(Qt::Key)", "buttonSelectKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONSTARTKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonStartKeyChanged(Qt::Key)", "buttonStartKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONGUIDEKEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonGuideKeyChanged(Qt::Key)", "buttonGuideKeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONL1KEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonL1KeyChanged(Qt::Key)", "buttonL1KeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONR1KEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonR1KeyChanged(Qt::Key)", "buttonR1KeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONL2KEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonL2KeyChanged(Qt::Key)", "buttonL2KeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONR2KEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonR2KeyChanged(Qt::Key)", "buttonR2KeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONL3KEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonL3KeyChanged(Qt::Key)", "buttonL3KeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPADKEYNAVIGATION_ONBUTTONR3KEYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepadKeyNavigation( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonR3KeyChanged(Qt::Key)", "buttonR3KeyChanged(Qt::Key)" ) );
#else
  hb_retl( false );
#endif
}

