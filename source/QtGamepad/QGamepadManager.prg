/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

CLASS QGamepadManager INHERIT QObject

   METHOD configureAxis
   METHOD configureButton
   METHOD instance
   METHOD isConfigurationNeeded
   METHOD isGamepadConnected
   METHOD resetConfiguration
   METHOD setCancelConfigureButton
   METHOD setSettingsFile

   METHOD onAxisConfigured
   METHOD onButtonConfigured
   METHOD onConfigurationCanceled
   METHOD onConnectedGamepadsChanged
   METHOD onGamepadAxisEvent
   METHOD onGamepadButtonPressEvent
   METHOD onGamepadButtonReleaseEvent
   METHOD onGamepadConnected
   METHOD onGamepadDisconnected

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QGamepadManager
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
#include <QGamepadManager>
#endif
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
#include <QGamepadManager>
#endif
#endif

/*
QGamepadManager() (private)
*/

/*
~QGamepadManager() (private)
*/

/*
const QList<int> connectedGamepads() const
*/

/*
static QGamepadManager* instance()
*/
HB_FUNC_STATIC( QGAMEPADMANAGER_INSTANCE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
    if( ISNUMPAR(0) )
  {
      QGamepadManager * ptr = QGamepadManager::instance ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QGAMEPADMANAGER" );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
#endif
}

/*
bool isGamepadConnected(int deviceId) const
*/
HB_FUNC_STATIC( QGAMEPADMANAGER_ISGAMEPADCONNECTED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QGamepadManager * obj = (QGamepadManager *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      RBOOL( obj->isGamepadConnected ( PINT(1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
bool isConfigurationNeeded(int deviceId) const (slot)
*/
HB_FUNC_STATIC( QGAMEPADMANAGER_ISCONFIGURATIONNEEDED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QGamepadManager * obj = (QGamepadManager *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      RBOOL( obj->isConfigurationNeeded ( PINT(1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
bool configureButton(int deviceId, GamepadButton button) (slot)
*/
HB_FUNC_STATIC( QGAMEPADMANAGER_CONFIGUREBUTTON )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QGamepadManager * obj = (QGamepadManager *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(2) && ISNUM(1) && ISNUM(2) )
    {
      RBOOL( obj->configureButton ( PINT(1), (QGamepadManager::GamepadButton) hb_parni(2) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
bool configureAxis(int deviceId, GamepadAxis axis) (slot)
*/
HB_FUNC_STATIC( QGAMEPADMANAGER_CONFIGUREAXIS )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QGamepadManager * obj = (QGamepadManager *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(2) && ISNUM(1) && ISNUM(2) )
    {
      RBOOL( obj->configureAxis ( PINT(1), (QGamepadManager::GamepadAxis) hb_parni(2) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
bool setCancelConfigureButton(int deviceId, GamepadButton button) (slot)
*/
HB_FUNC_STATIC( QGAMEPADMANAGER_SETCANCELCONFIGUREBUTTON )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QGamepadManager * obj = (QGamepadManager *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(2) && ISNUM(1) && ISNUM(2) )
    {
      RBOOL( obj->setCancelConfigureButton ( PINT(1), (QGamepadManager::GamepadButton) hb_parni(2) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void resetConfiguration(int deviceId) (slot)
*/
HB_FUNC_STATIC( QGAMEPADMANAGER_RESETCONFIGURATION )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QGamepadManager * obj = (QGamepadManager *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->resetConfiguration ( PINT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
void setSettingsFile(const QString &file) (slot)
*/
HB_FUNC_STATIC( QGAMEPADMANAGER_SETSETTINGSFILE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QGamepadManager * obj = (QGamepadManager *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setSettingsFile ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

#pragma ENDDUMP
