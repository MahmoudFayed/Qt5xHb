/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QGamepadSlots.h"

static SlotsQGamepad * s = NULL;

SlotsQGamepad::SlotsQGamepad(QObject *parent) : QObject(parent)
{
}

SlotsQGamepad::~SlotsQGamepad()
{
}
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::axisLeftXChanged( double value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "axisLeftXChanged(double)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::axisLeftYChanged( double value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "axisLeftYChanged(double)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::axisRightXChanged( double value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "axisRightXChanged(double)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::axisRightYChanged( double value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "axisRightYChanged(double)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonAChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonAChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonBChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonBChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonCenterChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonCenterChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonDownChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonDownChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonGuideChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonGuideChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonL1Changed( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonL1Changed(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonL2Changed( double value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonL2Changed(double)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonL3Changed( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonL3Changed(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonLeftChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonLeftChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonR1Changed( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonR1Changed(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonR2Changed( double value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonR2Changed(double)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutND( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonR3Changed( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonR3Changed(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonRightChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonRightChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonSelectChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonSelectChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonStartChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonStartChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonUpChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonUpChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonXChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonXChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::buttonYChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "buttonYChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::connectedChanged( bool value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "connectedChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutL( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::deviceIdChanged( int value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "deviceIdChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutNI( NULL, value );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
void SlotsQGamepad::nameChanged( QString value )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "nameChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvalue = hb_itemPutC( NULL, (const char *) value.toLatin1().data() );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvalue );
    hb_itemRelease( psender );
    hb_itemRelease( pvalue );
  }
}
#endif

HB_FUNC( QGAMEPAD_ONAXISLEFTXCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "axisLeftXChanged(double)", "axisLeftXChanged(double)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONAXISLEFTYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "axisLeftYChanged(double)", "axisLeftYChanged(double)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONAXISRIGHTXCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "axisRightXChanged(double)", "axisRightXChanged(double)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONAXISRIGHTYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "axisRightYChanged(double)", "axisRightYChanged(double)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONACHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonAChanged(bool)", "buttonAChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONBCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonBChanged(bool)", "buttonBChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONCENTERCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonCenterChanged(bool)", "buttonCenterChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONDOWNCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonDownChanged(bool)", "buttonDownChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONGUIDECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonGuideChanged(bool)", "buttonGuideChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONL1CHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonL1Changed(bool)", "buttonL1Changed(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONL2CHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonL2Changed(double)", "buttonL2Changed(double)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONL3CHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonL3Changed(bool)", "buttonL3Changed(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONLEFTCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonLeftChanged(bool)", "buttonLeftChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONR1CHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonR1Changed(bool)", "buttonR1Changed(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONR2CHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonR2Changed(double)", "buttonR2Changed(double)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONR3CHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonR3Changed(bool)", "buttonR3Changed(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONRIGHTCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonRightChanged(bool)", "buttonRightChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONSELECTCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonSelectChanged(bool)", "buttonSelectChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONSTARTCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonStartChanged(bool)", "buttonStartChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONUPCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonUpChanged(bool)", "buttonUpChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONXCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonXChanged(bool)", "buttonXChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONBUTTONYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "buttonYChanged(bool)", "buttonYChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONCONNECTEDCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "connectedChanged(bool)", "connectedChanged(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONDEVICEIDCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "deviceIdChanged(int)", "deviceIdChanged(int)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QGAMEPAD_ONNAMECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  if( s == NULL )
  {
    s = new SlotsQGamepad( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "nameChanged(QString)", "nameChanged(QString)" ) );
#else
  hb_retl( false );
#endif
}

