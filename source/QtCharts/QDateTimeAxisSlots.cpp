/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QDateTimeAxisSlots.h"

static QDateTimeAxisSlots * s = NULL;

QDateTimeAxisSlots::QDateTimeAxisSlots(QObject *parent) : QObject(parent)
{
}

QDateTimeAxisSlots::~QDateTimeAxisSlots()
{
}
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QDateTimeAxisSlots::formatChanged( QString format )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "formatChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pformat = hb_itemPutC( NULL, (const char *) format.toLatin1().data() );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pformat );
    hb_itemRelease( psender );
    hb_itemRelease( pformat );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QDateTimeAxisSlots::maxChanged( QDateTime max )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "maxChanged(QDateTime)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmax = hb_itemPutPtr( NULL, (QDateTime *) &max );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmax );
    hb_itemRelease( psender );
    hb_itemRelease( pmax );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QDateTimeAxisSlots::minChanged( QDateTime min )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "minChanged(QDateTime)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmin = hb_itemPutPtr( NULL, (QDateTime *) &min );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmin );
    hb_itemRelease( psender );
    hb_itemRelease( pmin );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QDateTimeAxisSlots::rangeChanged( QDateTime min, QDateTime max )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rangeChanged(QDateTime,QDateTime)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmin = hb_itemPutPtr( NULL, (QDateTime *) &min );
    PHB_ITEM pmax = hb_itemPutPtr( NULL, (QDateTime *) &max );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pmin, pmax );
    hb_itemRelease( psender );
    hb_itemRelease( pmin );
    hb_itemRelease( pmax );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QDateTimeAxisSlots::tickCountChanged( int tick )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "tickCountChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ptick = hb_itemPutNI( NULL, tick );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ptick );
    hb_itemRelease( psender );
    hb_itemRelease( ptick );
  }
}
#endif

HB_FUNC( QDATETIMEAXIS_ONFORMATCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QDateTimeAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "formatChanged(QString)", "formatChanged(QString)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QDATETIMEAXIS_ONMAXCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QDateTimeAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "maxChanged(QDateTime)", "maxChanged(QDateTime)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QDATETIMEAXIS_ONMINCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QDateTimeAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "minChanged(QDateTime)", "minChanged(QDateTime)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QDATETIMEAXIS_ONRANGECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QDateTimeAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rangeChanged(QDateTime,QDateTime)", "rangeChanged(QDateTime,QDateTime)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QDATETIMEAXIS_ONTICKCOUNTCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QDateTimeAxisSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "tickCountChanged(int)", "tickCountChanged(int)" ) );
#else
  hb_retl( false );
#endif
}

