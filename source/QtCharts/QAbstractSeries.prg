/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

CLASS QAbstractSeries INHERIT QObject

   METHOD delete

   METHOD attachAxis
   METHOD attachedAxes
   METHOD chart
   METHOD detachAxis
   METHOD hide
   METHOD isVisible
   METHOD name
   METHOD opacity
   METHOD setName
   METHOD setOpacity
   METHOD setUseOpenGL
   METHOD setVisible
   METHOD show
   METHOD type
   METHOD useOpenGL

   METHOD onNameChanged
   METHOD onOpacityChanged
   METHOD onUseOpenGLChanged
   METHOD onVisibleChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QAbstractSeries
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <QAbstractSeries>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QAbstractSeries>
#endif

#include <QChart>

using namespace QtCharts;

/*
QAbstractSeries(QAbstractSeriesPrivate &d, QObject *parent = nullptr) (protected)
*/

/*
~QAbstractSeries()
*/
HB_FUNC_STATIC( QABSTRACTSERIES_DELETE )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
virtual SeriesType type() const = 0
*/
HB_FUNC_STATIC( QABSTRACTSERIES_TYPE )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->type () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QString name() const
*/
HB_FUNC_STATIC( QABSTRACTSERIES_NAME )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->name () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setName(const QString &name)
*/
HB_FUNC_STATIC( QABSTRACTSERIES_SETNAME )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setName ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isVisible() const
*/
HB_FUNC_STATIC( QABSTRACTSERIES_ISVISIBLE )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isVisible () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setVisible(bool visible = true)
*/
HB_FUNC_STATIC( QABSTRACTSERIES_SETVISIBLE )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISBETWEEN(0,1) && ISOPTLOG(1) )
    {
      obj->setVisible ( OPBOOL(1,true) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
qreal opacity() const
*/
HB_FUNC_STATIC( QABSTRACTSERIES_OPACITY )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->opacity () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setOpacity(qreal opacity)
*/
HB_FUNC_STATIC( QABSTRACTSERIES_SETOPACITY )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setOpacity ( PQREAL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool useOpenGL() const
*/
HB_FUNC_STATIC( QABSTRACTSERIES_USEOPENGL )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->useOpenGL () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setUseOpenGL(bool enable = true)
*/
HB_FUNC_STATIC( QABSTRACTSERIES_SETUSEOPENGL )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISBETWEEN(0,1) && ISOPTLOG(1) )
    {
      obj->setUseOpenGL ( OPBOOL(1,true) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QChart *chart() const
*/
HB_FUNC_STATIC( QABSTRACTSERIES_CHART )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QChart * ptr = obj->chart ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QCHART" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool attachAxis(QAbstractAxis *axis)
*/
HB_FUNC_STATIC( QABSTRACTSERIES_ATTACHAXIS )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQABSTRACTAXIS(1) )
    {
      RBOOL( obj->attachAxis ( PQABSTRACTAXIS(1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool detachAxis(QAbstractAxis *axis)
*/
HB_FUNC_STATIC( QABSTRACTSERIES_DETACHAXIS )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQABSTRACTAXIS(1) )
    {
      RBOOL( obj->detachAxis ( PQABSTRACTAXIS(1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QList<QAbstractAxis*> attachedAxes()
*/
HB_FUNC_STATIC( QABSTRACTSERIES_ATTACHEDAXES )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QList<QAbstractAxis *> list = obj->attachedAxes ();
      PHB_DYNS pDynSym = hb_dynsymFindName( "QABSTRACTAXIS" );
      PHB_ITEM pArray = hb_itemArrayNew(0);
      int i;
      for(i=0;i<list.count();i++)
      {
        if( pDynSym )
        {
          hb_vmPushDynSym( pDynSym );
          hb_vmPushNil();
          hb_vmDo( 0 );
          PHB_ITEM pObject = hb_itemNew( NULL );
          hb_itemCopy( pObject, hb_stackReturnItem() );
          PHB_ITEM pItem = hb_itemNew( NULL );
          hb_itemPutPtr( pItem, (QAbstractAxis *) list[i] );
          hb_objSendMsg( pObject, "_POINTER", 1, pItem );
          hb_itemRelease( pItem );
          hb_arrayAddForward( pArray, pObject );
          hb_itemRelease( pObject );
        }
        else
        {
          hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QABSTRACTAXIS", HB_ERR_ARGS_BASEPARAMS );
        }
      }
      hb_itemReturnRelease(pArray);
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void show()
*/
HB_FUNC_STATIC( QABSTRACTSERIES_SHOW )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->show ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void hide()
*/
HB_FUNC_STATIC( QABSTRACTSERIES_HIDE )
{
  QAbstractSeries * obj = (QAbstractSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->hide ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

#pragma ENDDUMP
