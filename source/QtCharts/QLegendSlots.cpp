/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QLegendSlots.h"

static SlotsQLegend * s = NULL;

SlotsQLegend::SlotsQLegend(QObject *parent) : QObject(parent)
{
}

SlotsQLegend::~SlotsQLegend()
{
}
void SlotsQLegend::backgroundVisibleChanged( bool visible )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "backgroundVisibleChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pvisible = hb_itemPutL( NULL, visible );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pvisible );
    hb_itemRelease( psender );
    hb_itemRelease( pvisible );
  }
}
void SlotsQLegend::borderColorChanged( QColor color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "borderColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQLegend::colorChanged( QColor color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "colorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQLegend::fontChanged( QFont font )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "fontChanged(QFont)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pfont = hb_itemPutPtr( NULL, (QFont *) &font );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pfont );
    hb_itemRelease( psender );
    hb_itemRelease( pfont );
  }
}
void SlotsQLegend::labelColorChanged( QColor color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQLegend::markerShapeChanged( QLegend::MarkerShape shape )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "markerShapeChanged(QLegend::MarkerShape)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pshape = hb_itemPutNI( NULL, (int) shape );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pshape );
    hb_itemRelease( psender );
    hb_itemRelease( pshape );
  }
}
void SlotsQLegend::reverseMarkersChanged( bool reverseMarkers )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "reverseMarkersChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM preverseMarkers = hb_itemPutL( NULL, reverseMarkers );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, preverseMarkers );
    hb_itemRelease( psender );
    hb_itemRelease( preverseMarkers );
  }
}
void SlotsQLegend::showToolTipsChanged( bool showToolTips )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "showToolTipsChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pshowToolTips = hb_itemPutL( NULL, showToolTips );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pshowToolTips );
    hb_itemRelease( psender );
    hb_itemRelease( pshowToolTips );
  }
}

HB_FUNC( QLEGEND_ONBACKGROUNDVISIBLECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegend( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "backgroundVisibleChanged(bool)", "backgroundVisibleChanged(bool)" ) );
}

HB_FUNC( QLEGEND_ONBORDERCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegend( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "borderColorChanged(QColor)", "borderColorChanged(QColor)" ) );
}

HB_FUNC( QLEGEND_ONCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegend( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "colorChanged(QColor)", "colorChanged(QColor)" ) );
}

HB_FUNC( QLEGEND_ONFONTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegend( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "fontChanged(QFont)", "fontChanged(QFont)" ) );
}

HB_FUNC( QLEGEND_ONLABELCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegend( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelColorChanged(QColor)", "labelColorChanged(QColor)" ) );
}

HB_FUNC( QLEGEND_ONMARKERSHAPECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegend( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "markerShapeChanged(QLegend::MarkerShape)", "markerShapeChanged(QLegend::MarkerShape)" ) );
}

HB_FUNC( QLEGEND_ONREVERSEMARKERSCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegend( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "reverseMarkersChanged(bool)", "reverseMarkersChanged(bool)" ) );
}

HB_FUNC( QLEGEND_ONSHOWTOOLTIPSCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegend( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "showToolTipsChanged(bool)", "showToolTipsChanged(bool)" ) );
}

