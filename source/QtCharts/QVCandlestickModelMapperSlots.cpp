/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QVCandlestickModelMapperSlots.h"

static QVCandlestickModelMapperSlots * s = NULL;

QVCandlestickModelMapperSlots::QVCandlestickModelMapperSlots(QObject *parent) : QObject(parent)
{
}

QVCandlestickModelMapperSlots::~QVCandlestickModelMapperSlots()
{
}
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QVCandlestickModelMapperSlots::closeRowChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "closeRowChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QVCandlestickModelMapperSlots::firstSetColumnChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "firstSetColumnChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QVCandlestickModelMapperSlots::highRowChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "highRowChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QVCandlestickModelMapperSlots::lastSetColumnChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "lastSetColumnChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QVCandlestickModelMapperSlots::lowRowChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "lowRowChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QVCandlestickModelMapperSlots::openRowChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "openRowChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QVCandlestickModelMapperSlots::timestampRowChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "timestampRowChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif

HB_FUNC( QVCANDLESTICKMODELMAPPER_ONCLOSEROWCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QVCandlestickModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "closeRowChanged()", "closeRowChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVCANDLESTICKMODELMAPPER_ONFIRSTSETCOLUMNCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QVCandlestickModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "firstSetColumnChanged()", "firstSetColumnChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVCANDLESTICKMODELMAPPER_ONHIGHROWCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QVCandlestickModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "highRowChanged()", "highRowChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVCANDLESTICKMODELMAPPER_ONLASTSETCOLUMNCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QVCandlestickModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "lastSetColumnChanged()", "lastSetColumnChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVCANDLESTICKMODELMAPPER_ONLOWROWCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QVCandlestickModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "lowRowChanged()", "lowRowChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVCANDLESTICKMODELMAPPER_ONOPENROWCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QVCandlestickModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "openRowChanged()", "openRowChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVCANDLESTICKMODELMAPPER_ONTIMESTAMPROWCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QVCandlestickModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "timestampRowChanged()", "timestampRowChanged()" ) );
#else
  hb_retl( false );
#endif
}

