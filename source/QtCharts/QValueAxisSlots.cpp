/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QValueAxisSlots.h"

static SlotsQValueAxis * s = NULL;

SlotsQValueAxis::SlotsQValueAxis(QObject *parent) : QObject(parent)
{
}

SlotsQValueAxis::~SlotsQValueAxis()
{
}
void SlotsQValueAxis::labelFormatChanged( const QString & format )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelFormatChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pformat = hb_itemPutC( NULL, QSTRINGTOSTRING(format) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pformat );
    hb_itemRelease( psender );
    hb_itemRelease( pformat );
  }
}
void SlotsQValueAxis::maxChanged( qreal max )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "maxChanged(qreal)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmax = hb_itemPutND( NULL, max );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmax );
    hb_itemRelease( psender );
    hb_itemRelease( pmax );
  }
}
void SlotsQValueAxis::minChanged( qreal min )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "minChanged(qreal)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmin = hb_itemPutND( NULL, min );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmin );
    hb_itemRelease( psender );
    hb_itemRelease( pmin );
  }
}
void SlotsQValueAxis::minorTickCountChanged( int tickCount )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "minorTickCountChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ptickCount = hb_itemPutNI( NULL, tickCount );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ptickCount );
    hb_itemRelease( psender );
    hb_itemRelease( ptickCount );
  }
}
void SlotsQValueAxis::rangeChanged( qreal min, qreal max )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rangeChanged(qreal,qreal)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmin = hb_itemPutND( NULL, min );
    PHB_ITEM pmax = hb_itemPutND( NULL, max );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pmin, pmax );
    hb_itemRelease( psender );
    hb_itemRelease( pmin );
    hb_itemRelease( pmax );
  }
}
void SlotsQValueAxis::tickCountChanged( int tickCount )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "tickCountChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ptickCount = hb_itemPutNI( NULL, tickCount );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ptickCount );
    hb_itemRelease( psender );
    hb_itemRelease( ptickCount );
  }
}

HB_FUNC( QVALUEAXIS_ONLABELFORMATCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQValueAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelFormatChanged(QString)", "labelFormatChanged(QString)" ) );
}

HB_FUNC( QVALUEAXIS_ONMAXCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQValueAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "maxChanged(qreal)", "maxChanged(qreal)" ) );
}

HB_FUNC( QVALUEAXIS_ONMINCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQValueAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "minChanged(qreal)", "minChanged(qreal)" ) );
}

HB_FUNC( QVALUEAXIS_ONMINORTICKCOUNTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQValueAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "minorTickCountChanged(int)", "minorTickCountChanged(int)" ) );
}

HB_FUNC( QVALUEAXIS_ONRANGECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQValueAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rangeChanged(qreal,qreal)", "rangeChanged(qreal,qreal)" ) );
}

HB_FUNC( QVALUEAXIS_ONTICKCOUNTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQValueAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "tickCountChanged(int)", "tickCountChanged(int)" ) );
}

