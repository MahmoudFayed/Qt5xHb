/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QVBarModelMapperSlots.h"

static QVBarModelMapperSlots * s = NULL;

QVBarModelMapperSlots::QVBarModelMapperSlots(QObject *parent) : QObject(parent)
{
}

QVBarModelMapperSlots::~QVBarModelMapperSlots()
{
}
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QVBarModelMapperSlots::firstBarSetColumnChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "firstBarSetColumnChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QVBarModelMapperSlots::firstRowChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "firstRowChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QVBarModelMapperSlots::lastBarSetColumnChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "lastBarSetColumnChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QVBarModelMapperSlots::modelReplaced()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "modelReplaced()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QVBarModelMapperSlots::rowCountChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rowCountChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QVBarModelMapperSlots::seriesReplaced()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "seriesReplaced()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif

HB_FUNC( QVBARMODELMAPPER_ONFIRSTBARSETCOLUMNCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QVBarModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "firstBarSetColumnChanged()", "firstBarSetColumnChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVBARMODELMAPPER_ONFIRSTROWCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QVBarModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "firstRowChanged()", "firstRowChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVBARMODELMAPPER_ONLASTBARSETCOLUMNCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QVBarModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "lastBarSetColumnChanged()", "lastBarSetColumnChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVBARMODELMAPPER_ONMODELREPLACED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QVBarModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "modelReplaced()", "modelReplaced()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVBARMODELMAPPER_ONROWCOUNTCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QVBarModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rowCountChanged()", "rowCountChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QVBARMODELMAPPER_ONSERIESREPLACED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QVBarModelMapperSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "seriesReplaced()", "seriesReplaced()" ) );
#else
  hb_retl( false );
#endif
}

