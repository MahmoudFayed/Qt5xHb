/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QLegendMarkerSlots.h"

static SlotsQLegendMarker * s = NULL;

SlotsQLegendMarker::SlotsQLegendMarker(QObject *parent) : QObject(parent)
{
}

SlotsQLegendMarker::~SlotsQLegendMarker()
{
}
void SlotsQLegendMarker::brushChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "brushChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQLegendMarker::clicked()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "clicked()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQLegendMarker::fontChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "fontChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQLegendMarker::hovered( bool status )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "hovered(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstatus = hb_itemPutL( NULL, status );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pstatus );
    hb_itemRelease( psender );
    hb_itemRelease( pstatus );
  }
}
void SlotsQLegendMarker::labelBrushChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelBrushChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQLegendMarker::labelChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQLegendMarker::penChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "penChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQLegendMarker::shapeChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "shapeChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQLegendMarker::visibleChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "visibleChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}

HB_FUNC( QLEGENDMARKER_ONBRUSHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegendMarker( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "brushChanged()", "brushChanged()" ) );
}

HB_FUNC( QLEGENDMARKER_ONCLICKED )
{
  if( s == NULL )
  {
    s = new SlotsQLegendMarker( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "clicked()", "clicked()" ) );
}

HB_FUNC( QLEGENDMARKER_ONFONTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegendMarker( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "fontChanged()", "fontChanged()" ) );
}

HB_FUNC( QLEGENDMARKER_ONHOVERED )
{
  if( s == NULL )
  {
    s = new SlotsQLegendMarker( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "hovered(bool)", "hovered(bool)" ) );
}

HB_FUNC( QLEGENDMARKER_ONLABELBRUSHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegendMarker( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelBrushChanged()", "labelBrushChanged()" ) );
}

HB_FUNC( QLEGENDMARKER_ONLABELCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegendMarker( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelChanged()", "labelChanged()" ) );
}

HB_FUNC( QLEGENDMARKER_ONPENCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegendMarker( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "penChanged()", "penChanged()" ) );
}

HB_FUNC( QLEGENDMARKER_ONSHAPECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegendMarker( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "shapeChanged()", "shapeChanged()" ) );
}

HB_FUNC( QLEGENDMARKER_ONVISIBLECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQLegendMarker( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "visibleChanged()", "visibleChanged()" ) );
}

