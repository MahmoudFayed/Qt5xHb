/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QPieSeriesSlots.h"

static QPieSeriesSlots * s = NULL;

QPieSeriesSlots::QPieSeriesSlots(QObject *parent) : QObject(parent)
{
}

QPieSeriesSlots::~QPieSeriesSlots()
{
}
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QPieSeriesSlots::added( QList<QPieSlice*> slices )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "added(QList<QPieSlice*>)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_DYNS pDynSym = hb_dynsymFindName( "QPIESLICE" );
    PHB_ITEM pslices = hb_itemArrayNew(0);
    int i;
    for(i=0;i<slices.count();i++)
    {
      if( pDynSym )
      {
        hb_vmPushDynSym( pDynSym );
        hb_vmPushNil();
        hb_vmDo( 0 );
        PHB_ITEM pTempObject = hb_itemNew( NULL );
        hb_itemCopy( pTempObject, hb_stackReturnItem() );
        PHB_ITEM pTempItem = hb_itemNew( NULL );
        hb_itemPutPtr( pTempItem, (QPieSlice *) slices [i] );
        hb_objSendMsg( pTempObject, "NEWFROMPOINTER", 1, pTempItem );
        hb_arrayAddForward( pslices, pTempObject );
        hb_itemRelease( pTempObject );
        hb_itemRelease( pTempItem );
      }
      else
      {
        hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QPIESLICE", HB_ERR_ARGS_BASEPARAMS );
      }
    }
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pslices );
    hb_itemRelease( psender );
    hb_itemRelease( pslices );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QPieSeriesSlots::clicked( QPieSlice * slice )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "clicked(QPieSlice*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pslice = hb_itemPutPtr( NULL, (QPieSlice *) slice );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pslice );
    hb_itemRelease( psender );
    hb_itemRelease( pslice );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QPieSeriesSlots::countChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "countChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QPieSeriesSlots::doubleClicked( QPieSlice * slice )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "doubleClicked(QPieSlice*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pslice = hb_itemPutPtr( NULL, (QPieSlice *) slice );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pslice );
    hb_itemRelease( psender );
    hb_itemRelease( pslice );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QPieSeriesSlots::hovered( QPieSlice * slice, bool state )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "hovered(QPieSlice*,bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pslice = hb_itemPutPtr( NULL, (QPieSlice *) slice );
    PHB_ITEM pstate = hb_itemPutL( NULL, state );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pslice, pstate );
    hb_itemRelease( psender );
    hb_itemRelease( pslice );
    hb_itemRelease( pstate );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QPieSeriesSlots::pressed( QPieSlice * slice )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "pressed(QPieSlice*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pslice = hb_itemPutPtr( NULL, (QPieSlice *) slice );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pslice );
    hb_itemRelease( psender );
    hb_itemRelease( pslice );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QPieSeriesSlots::released( QPieSlice * slice )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "released(QPieSlice*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pslice = hb_itemPutPtr( NULL, (QPieSlice *) slice );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pslice );
    hb_itemRelease( psender );
    hb_itemRelease( pslice );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QPieSeriesSlots::removed( QList<QPieSlice*> slices )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "removed(QList<QPieSlice*>)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_DYNS pDynSym = hb_dynsymFindName( "QPIESLICE" );
    PHB_ITEM pslices = hb_itemArrayNew(0);
    int i;
    for(i=0;i<slices.count();i++)
    {
      if( pDynSym )
      {
        hb_vmPushDynSym( pDynSym );
        hb_vmPushNil();
        hb_vmDo( 0 );
        PHB_ITEM pTempObject = hb_itemNew( NULL );
        hb_itemCopy( pTempObject, hb_stackReturnItem() );
        PHB_ITEM pTempItem = hb_itemNew( NULL );
        hb_itemPutPtr( pTempItem, (QPieSlice *) slices [i] );
        hb_objSendMsg( pTempObject, "NEWFROMPOINTER", 1, pTempItem );
        hb_arrayAddForward( pslices, pTempObject );
        hb_itemRelease( pTempObject );
        hb_itemRelease( pTempItem );
      }
      else
      {
        hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QPIESLICE", HB_ERR_ARGS_BASEPARAMS );
      }
    }
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pslices );
    hb_itemRelease( psender );
    hb_itemRelease( pslices );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QPieSeriesSlots::sumChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "sumChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif

HB_FUNC( QPIESERIES_ONADDED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QPieSeriesSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "added(QList<QPieSlice*>)", "added(QList<QPieSlice*>)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QPIESERIES_ONCLICKED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QPieSeriesSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "clicked(QPieSlice*)", "clicked(QPieSlice*)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QPIESERIES_ONCOUNTCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QPieSeriesSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "countChanged()", "countChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QPIESERIES_ONDOUBLECLICKED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QPieSeriesSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "doubleClicked(QPieSlice*)", "doubleClicked(QPieSlice*)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QPIESERIES_ONHOVERED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QPieSeriesSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "hovered(QPieSlice*,bool)", "hovered(QPieSlice*,bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QPIESERIES_ONPRESSED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QPieSeriesSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "pressed(QPieSlice*)", "pressed(QPieSlice*)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QPIESERIES_ONRELEASED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QPieSeriesSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "released(QPieSlice*)", "released(QPieSlice*)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QPIESERIES_ONREMOVED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QPieSeriesSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "removed(QList<QPieSlice*>)", "removed(QList<QPieSlice*>)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QPIESERIES_ONSUMCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  if( s == NULL )
  {
    s = new QPieSeriesSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "sumChanged()", "sumChanged()" ) );
#else
  hb_retl( false );
#endif
}

