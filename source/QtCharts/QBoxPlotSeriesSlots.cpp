/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QBoxPlotSeriesSlots.h"

static SlotsQBoxPlotSeries * s = NULL;

SlotsQBoxPlotSeries::SlotsQBoxPlotSeries(QObject *parent) : QObject(parent)
{
}

SlotsQBoxPlotSeries::~SlotsQBoxPlotSeries()
{
}
void SlotsQBoxPlotSeries::boxOutlineVisibilityChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "boxOutlineVisibilityChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBoxPlotSeries::boxsetsAdded( QList<QBoxSet*> sets )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "boxsetsAdded(QList<QBoxSet*>)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_DYNS pDynSym = hb_dynsymFindName( "QBOXSET" );
    PHB_ITEM psets = hb_itemArrayNew(0);
    int i;
    for(i=0;i<sets.count();i++)
    {
      if( pDynSym )
      {
        hb_vmPushDynSym( pDynSym );
        hb_vmPushNil();
        hb_vmDo( 0 );
        PHB_ITEM pTempObject = hb_itemNew( NULL );
        hb_itemCopy( pTempObject, hb_stackReturnItem() );
        PHB_ITEM pTempItem = hb_itemNew( NULL );
        hb_itemPutPtr( pTempItem, (QBoxSet *) sets [i] );
        hb_objSendMsg( pTempObject, "NEWFROMPOINTER", 1, pTempItem );
        hb_arrayAddForward( psets, pTempObject );
        hb_itemRelease( pTempObject );
        hb_itemRelease( pTempItem );
      }
      else
      {
        hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QBOXSET", HB_ERR_ARGS_BASEPARAMS );
      }
    }
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, psets );
    hb_itemRelease( psender );
    hb_itemRelease( psets );
  }
}
void SlotsQBoxPlotSeries::boxsetsRemoved( QList<QBoxSet*> sets )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "boxsetsRemoved(QList<QBoxSet*>)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_DYNS pDynSym = hb_dynsymFindName( "QBOXSET" );
    PHB_ITEM psets = hb_itemArrayNew(0);
    int i;
    for(i=0;i<sets.count();i++)
    {
      if( pDynSym )
      {
        hb_vmPushDynSym( pDynSym );
        hb_vmPushNil();
        hb_vmDo( 0 );
        PHB_ITEM pTempObject = hb_itemNew( NULL );
        hb_itemCopy( pTempObject, hb_stackReturnItem() );
        PHB_ITEM pTempItem = hb_itemNew( NULL );
        hb_itemPutPtr( pTempItem, (QBoxSet *) sets [i] );
        hb_objSendMsg( pTempObject, "NEWFROMPOINTER", 1, pTempItem );
        hb_arrayAddForward( psets, pTempObject );
        hb_itemRelease( pTempObject );
        hb_itemRelease( pTempItem );
      }
      else
      {
        hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QBOXSET", HB_ERR_ARGS_BASEPARAMS );
      }
    }
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, psets );
    hb_itemRelease( psender );
    hb_itemRelease( psets );
  }
}
void SlotsQBoxPlotSeries::boxWidthChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "boxWidthChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBoxPlotSeries::brushChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "brushChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBoxPlotSeries::clicked( QBoxSet * boxset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "clicked(QBoxSet*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pboxset = hb_itemPutPtr( NULL, (QBoxSet *) boxset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pboxset );
    hb_itemRelease( psender );
    hb_itemRelease( pboxset );
  }
}
void SlotsQBoxPlotSeries::countChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "countChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBoxPlotSeries::doubleClicked( QBoxSet * boxset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "doubleClicked(QBoxSet*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pboxset = hb_itemPutPtr( NULL, (QBoxSet *) boxset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pboxset );
    hb_itemRelease( psender );
    hb_itemRelease( pboxset );
  }
}
void SlotsQBoxPlotSeries::hovered( bool status, QBoxSet * boxset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "hovered(bool,QBoxSet*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstatus = hb_itemPutL( NULL, status );
    PHB_ITEM pboxset = hb_itemPutPtr( NULL, (QBoxSet *) boxset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pstatus, pboxset );
    hb_itemRelease( psender );
    hb_itemRelease( pstatus );
    hb_itemRelease( pboxset );
  }
}
void SlotsQBoxPlotSeries::penChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "penChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBoxPlotSeries::pressed( QBoxSet * boxset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "pressed(QBoxSet*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pboxset = hb_itemPutPtr( NULL, (QBoxSet *) boxset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pboxset );
    hb_itemRelease( psender );
    hb_itemRelease( pboxset );
  }
}
void SlotsQBoxPlotSeries::released( QBoxSet * boxset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "released(QBoxSet*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pboxset = hb_itemPutPtr( NULL, (QBoxSet *) boxset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pboxset );
    hb_itemRelease( psender );
    hb_itemRelease( pboxset );
  }
}

HB_FUNC( QBOXPLOTSERIES_ONBOXOUTLINEVISIBILITYCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "boxOutlineVisibilityChanged()", "boxOutlineVisibilityChanged()" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONBOXSETSADDED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "boxsetsAdded(QList<QBoxSet*>)", "boxsetsAdded(QList<QBoxSet*>)" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONBOXSETSREMOVED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "boxsetsRemoved(QList<QBoxSet*>)", "boxsetsRemoved(QList<QBoxSet*>)" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONBOXWIDTHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "boxWidthChanged()", "boxWidthChanged()" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONBRUSHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "brushChanged()", "brushChanged()" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONCLICKED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "clicked(QBoxSet*)", "clicked(QBoxSet*)" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONCOUNTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "countChanged()", "countChanged()" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONDOUBLECLICKED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "doubleClicked(QBoxSet*)", "doubleClicked(QBoxSet*)" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONHOVERED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "hovered(bool,QBoxSet*)", "hovered(bool,QBoxSet*)" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONPENCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "penChanged()", "penChanged()" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONPRESSED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "pressed(QBoxSet*)", "pressed(QBoxSet*)" ) );
}

HB_FUNC( QBOXPLOTSERIES_ONRELEASED )
{
  if( s == NULL )
  {
    s = new SlotsQBoxPlotSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "released(QBoxSet*)", "released(QBoxSet*)" ) );
}

