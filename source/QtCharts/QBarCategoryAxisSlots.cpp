/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QBarCategoryAxisSlots.h"

static SlotsQBarCategoryAxis * s = NULL;

SlotsQBarCategoryAxis::SlotsQBarCategoryAxis(QObject *parent) : QObject(parent)
{
}

SlotsQBarCategoryAxis::~SlotsQBarCategoryAxis()
{
}
void SlotsQBarCategoryAxis::categoriesChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "categoriesChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBarCategoryAxis::countChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "countChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBarCategoryAxis::maxChanged( const QString & max )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "maxChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmax = hb_itemPutC( NULL, QSTRINGTOSTRING(max) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmax );
    hb_itemRelease( psender );
    hb_itemRelease( pmax );
  }
}
void SlotsQBarCategoryAxis::minChanged( const QString & min )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "minChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmin = hb_itemPutC( NULL, QSTRINGTOSTRING(min) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmin );
    hb_itemRelease( psender );
    hb_itemRelease( pmin );
  }
}
void SlotsQBarCategoryAxis::rangeChanged( const QString & min, const QString & max )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rangeChanged(QString,QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pmin = hb_itemPutC( NULL, QSTRINGTOSTRING(min) );
    PHB_ITEM pmax = hb_itemPutC( NULL, QSTRINGTOSTRING(max) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pmin, pmax );
    hb_itemRelease( psender );
    hb_itemRelease( pmin );
    hb_itemRelease( pmax );
  }
}

HB_FUNC( QBARCATEGORYAXIS_ONCATEGORIESCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarCategoryAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "categoriesChanged()", "categoriesChanged()" ) );
}

HB_FUNC( QBARCATEGORYAXIS_ONCOUNTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarCategoryAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "countChanged()", "countChanged()" ) );
}

HB_FUNC( QBARCATEGORYAXIS_ONMAXCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarCategoryAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "maxChanged( const QString & max )", "maxChanged( const QString & max )" ) );
}

HB_FUNC( QBARCATEGORYAXIS_ONMINCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarCategoryAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "minChanged( const QString & min )", "minChanged( const QString & min )" ) );
}

HB_FUNC( QBARCATEGORYAXIS_ONRANGECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarCategoryAxis( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rangeChanged( const QString & min, const QString & max )", "rangeChanged( const QString & min, const QString & max )" ) );
}

