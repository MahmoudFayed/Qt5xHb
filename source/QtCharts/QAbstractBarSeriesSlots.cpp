/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QAbstractBarSeriesSlots.h"

static SlotsQAbstractBarSeries * s = NULL;

SlotsQAbstractBarSeries::SlotsQAbstractBarSeries(QObject *parent) : QObject(parent)
{
}

SlotsQAbstractBarSeries::~SlotsQAbstractBarSeries()
{
}
void SlotsQAbstractBarSeries::barsetsAdded( QList<QBarSet*> sets )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "barsetsAdded(QList<QBarSet*>)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_DYNS pDynSym = hb_dynsymFindName( "QBARSET" );
    PHB_ITEM psets = hb_itemArrayNew(0);
    int i;
    for(i=0;i<sets.count();i++)
    {
      if( pDynSym )
      {
        hb_vmPushDynSym( pDynSym );
        hb_vmPushNil();
        hb_vmDo( 0 );
        PHB_ITEM pTempObject = hb_itemNew( NULL );
        hb_itemCopy( pTempObject, hb_stackReturnItem() );
        PHB_ITEM pTempItem = hb_itemNew( NULL );
        hb_itemPutPtr( pTempItem, (QBarSet *) sets [i] );
        hb_objSendMsg( pTempObject, "NEWFROMPOINTER", 1, pTempItem );
        hb_arrayAddForward( psets, pTempObject );
        hb_itemRelease( pTempObject );
        hb_itemRelease( pTempItem );
      }
      else
      {
        hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QBARSET", HB_ERR_ARGS_BASEPARAMS );
      }
    }
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, psets );
    hb_itemRelease( psender );
    hb_itemRelease( psets );
  }
}
void SlotsQAbstractBarSeries::barsetsRemoved( QList<QBarSet*> sets )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "barsetsRemoved(QList<QBarSet*>)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_DYNS pDynSym = hb_dynsymFindName( "QBARSET" );
    PHB_ITEM psets = hb_itemArrayNew(0);
    int i;
    for(i=0;i<sets.count();i++)
    {
      if( pDynSym )
      {
        hb_vmPushDynSym( pDynSym );
        hb_vmPushNil();
        hb_vmDo( 0 );
        PHB_ITEM pTempObject = hb_itemNew( NULL );
        hb_itemCopy( pTempObject, hb_stackReturnItem() );
        PHB_ITEM pTempItem = hb_itemNew( NULL );
        hb_itemPutPtr( pTempItem, (QBarSet *) sets [i] );
        hb_objSendMsg( pTempObject, "NEWFROMPOINTER", 1, pTempItem );
        hb_arrayAddForward( psets, pTempObject );
        hb_itemRelease( pTempObject );
        hb_itemRelease( pTempItem );
      }
      else
      {
        hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QBARSET", HB_ERR_ARGS_BASEPARAMS );
      }
    }
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, psets );
    hb_itemRelease( psender );
    hb_itemRelease( psets );
  }
}
void SlotsQAbstractBarSeries::clicked( int index, QBarSet * barset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "clicked(int,QBarSet*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    PHB_ITEM pbarset = hb_itemPutPtr( NULL, (QBarSet *) barset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pindex, pbarset );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
    hb_itemRelease( pbarset );
  }
}
void SlotsQAbstractBarSeries::countChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "countChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQAbstractBarSeries::doubleClicked( int index, QBarSet * barset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "doubleClicked(int,QBarSet*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    PHB_ITEM pbarset = hb_itemPutPtr( NULL, (QBarSet *) barset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pindex, pbarset );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
    hb_itemRelease( pbarset );
  }
}
void SlotsQAbstractBarSeries::hovered( bool status, int index, QBarSet * barset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "hovered(bool,int,QBarSet*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstatus = hb_itemPutL( NULL, status );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    PHB_ITEM pbarset = hb_itemPutPtr( NULL, (QBarSet *) barset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 4, psender, pstatus, pindex, pbarset );
    hb_itemRelease( psender );
    hb_itemRelease( pstatus );
    hb_itemRelease( pindex );
    hb_itemRelease( pbarset );
  }
}
void SlotsQAbstractBarSeries::labelsAngleChanged( qreal angle )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelsAngleChanged(qreal)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pangle = hb_itemPutND( NULL, angle );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pangle );
    hb_itemRelease( psender );
    hb_itemRelease( pangle );
  }
}
void SlotsQAbstractBarSeries::labelsFormatChanged( const QString & format )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelsFormatChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pformat = hb_itemPutC( NULL, QSTRINGTOSTRING(format) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pformat );
    hb_itemRelease( psender );
    hb_itemRelease( pformat );
  }
}
void SlotsQAbstractBarSeries::labelsPositionChanged( QAbstractBarSeries::LabelsPosition position )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelsPositionChanged(QAbstractBarSeries::LabelsPosition)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pposition = hb_itemPutNI( NULL, (int) position );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pposition );
    hb_itemRelease( psender );
    hb_itemRelease( pposition );
  }
}
void SlotsQAbstractBarSeries::labelsVisibleChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelsVisibleChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQAbstractBarSeries::pressed( int index, QBarSet * barset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "pressed(int,QBarSet*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    PHB_ITEM pbarset = hb_itemPutPtr( NULL, (QBarSet *) barset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pindex, pbarset );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
    hb_itemRelease( pbarset );
  }
}
void SlotsQAbstractBarSeries::released( int index, QBarSet * barset )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "released(int,QBarSet*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    PHB_ITEM pbarset = hb_itemPutPtr( NULL, (QBarSet *) barset );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pindex, pbarset );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
    hb_itemRelease( pbarset );
  }
}

HB_FUNC( QABSTRACTBARSERIES_ONBARSETSADDED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "barsetsAdded(QList<QBarSet*>)", "barsetsAdded(QList<QBarSet*>)" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONBARSETSREMOVED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "barsetsRemoved(QList<QBarSet*>)", "barsetsRemoved(QList<QBarSet*>)" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONCLICKED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "clicked(int,QBarSet*)", "clicked(int,QBarSet*)" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONCOUNTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "countChanged()", "countChanged()" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONDOUBLECLICKED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "doubleClicked(int,QBarSet*)", "doubleClicked(int,QBarSet*)" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONHOVERED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "hovered(bool,int,QBarSet*)", "hovered(bool,int,QBarSet*)" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONLABELSANGLECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelsAngleChanged(qreal)", "labelsAngleChanged(qreal)" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONLABELSFORMATCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelsFormatChanged(QString)", "labelsFormatChanged(QString)" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONLABELSPOSITIONCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelsPositionChanged(QAbstractBarSeries::LabelsPosition)", "labelsPositionChanged(QAbstractBarSeries::LabelsPosition)" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONLABELSVISIBLECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelsVisibleChanged()", "labelsVisibleChanged()" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONPRESSED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "pressed(int,QBarSet*)", "pressed(int,QBarSet*)" ) );
}

HB_FUNC( QABSTRACTBARSERIES_ONRELEASED )
{
  if( s == NULL )
  {
    s = new SlotsQAbstractBarSeries( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "released(int,QBarSet*)", "released(int,QBarSet*)" ) );
}

