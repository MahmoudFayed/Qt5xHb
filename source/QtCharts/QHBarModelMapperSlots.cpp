/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QHBarModelMapperSlots.h"

static SlotsQHBarModelMapper * s = NULL;

SlotsQHBarModelMapper::SlotsQHBarModelMapper(QObject *parent) : QObject(parent)
{
}

SlotsQHBarModelMapper::~SlotsQHBarModelMapper()
{
}
void SlotsQHBarModelMapper::columnCountChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "columnCountChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQHBarModelMapper::firstBarSetRowChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "firstBarSetRowChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQHBarModelMapper::firstColumnChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "firstColumnChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQHBarModelMapper::lastBarSetRowChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "lastBarSetRowChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQHBarModelMapper::modelReplaced()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "modelReplaced()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQHBarModelMapper::seriesReplaced()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "seriesReplaced()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}

HB_FUNC( QHBARMODELMAPPER_ONCOLUMNCOUNTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQHBarModelMapper( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "columnCountChanged()", "columnCountChanged()" ) );
}

HB_FUNC( QHBARMODELMAPPER_ONFIRSTBARSETROWCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQHBarModelMapper( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "firstBarSetRowChanged()", "firstBarSetRowChanged()" ) );
}

HB_FUNC( QHBARMODELMAPPER_ONFIRSTCOLUMNCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQHBarModelMapper( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "firstColumnChanged()", "firstColumnChanged()" ) );
}

HB_FUNC( QHBARMODELMAPPER_ONLASTBARSETROWCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQHBarModelMapper( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "lastBarSetRowChanged()", "lastBarSetRowChanged()" ) );
}

HB_FUNC( QHBARMODELMAPPER_ONMODELREPLACED )
{
  if( s == NULL )
  {
    s = new SlotsQHBarModelMapper( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "modelReplaced()", "modelReplaced()" ) );
}

HB_FUNC( QHBARMODELMAPPER_ONSERIESREPLACED )
{
  if( s == NULL )
  {
    s = new SlotsQHBarModelMapper( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "seriesReplaced()", "seriesReplaced()" ) );
}

