/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QCandlestickSetSlots.h"

static QCandlestickSetSlots * s = NULL;

QCandlestickSetSlots::QCandlestickSetSlots(QObject *parent) : QObject(parent)
{
}

QCandlestickSetSlots::~QCandlestickSetSlots()
{
}
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::brushChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "brushChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::clicked()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "clicked()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::closeChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "closeChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::doubleClicked()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "doubleClicked()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::highChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "highChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::hovered( bool status )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "hovered(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstatus = hb_itemPutL( NULL, status );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pstatus );
    hb_itemRelease( psender );
    hb_itemRelease( pstatus );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::lowChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "lowChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::openChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "openChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::penChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "penChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::pressed()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "pressed()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::released()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "released()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
void QCandlestickSetSlots::timestampChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "timestampChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
#endif

HB_FUNC( QCANDLESTICKSET_ONBRUSHCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "brushChanged()", "brushChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONCLICKED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "clicked()", "clicked()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONCLOSECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "closeChanged()", "closeChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONDOUBLECLICKED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "doubleClicked()", "doubleClicked()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONHIGHCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "highChanged()", "highChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONHOVERED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "hovered(bool)", "hovered(bool)" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONLOWCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "lowChanged()", "lowChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONOPENCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "openChanged()", "openChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONPENCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "penChanged()", "penChanged()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONPRESSED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "pressed()", "pressed()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONRELEASED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "released()", "released()" ) );
#else
  hb_retl( false );
#endif
}

HB_FUNC( QCANDLESTICKSET_ONTIMESTAMPCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( s == NULL )
  {
    s = new QCandlestickSetSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "timestampChanged()", "timestampChanged()" ) );
#else
  hb_retl( false );
#endif
}

