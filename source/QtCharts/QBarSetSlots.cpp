/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QBarSetSlots.h"

static SlotsQBarSet * s = NULL;

SlotsQBarSet::SlotsQBarSet(QObject *parent) : QObject(parent)
{
}

SlotsQBarSet::~SlotsQBarSet()
{
}
void SlotsQBarSet::borderColorChanged( QColor color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "borderColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQBarSet::brushChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "brushChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBarSet::clicked( int index )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "clicked(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pindex );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
  }
}
void SlotsQBarSet::colorChanged( QColor color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "colorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQBarSet::doubleClicked( int index )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "doubleClicked(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pindex );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
  }
}
void SlotsQBarSet::hovered( bool status, int index )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "hovered(bool,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstatus = hb_itemPutL( NULL, status );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pstatus, pindex );
    hb_itemRelease( psender );
    hb_itemRelease( pstatus );
    hb_itemRelease( pindex );
  }
}
void SlotsQBarSet::labelBrushChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelBrushChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBarSet::labelChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBarSet::labelColorChanged( QColor color )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelColorChanged(QColor)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcolor = hb_itemPutPtr( NULL, (QColor *) &color );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcolor );
    hb_itemRelease( psender );
    hb_itemRelease( pcolor );
  }
}
void SlotsQBarSet::labelFontChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "labelFontChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBarSet::penChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "penChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void SlotsQBarSet::pressed( int index )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "pressed(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pindex );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
  }
}
void SlotsQBarSet::released( int index )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "released(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pindex );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
  }
}
void SlotsQBarSet::valueChanged( int index )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "valueChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pindex );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
  }
}
void SlotsQBarSet::valuesAdded( int index, int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "valuesAdded(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pindex, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
    hb_itemRelease( pcount );
  }
}
void SlotsQBarSet::valuesRemoved( int index, int count )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "valuesRemoved(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );
    PHB_ITEM pcount = hb_itemPutNI( NULL, count );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pindex, pcount );
    hb_itemRelease( psender );
    hb_itemRelease( pindex );
    hb_itemRelease( pcount );
  }
}

HB_FUNC( QBARSET_ONBORDERCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "borderColorChanged(QColor)", "borderColorChanged(QColor)" ) );
}

HB_FUNC( QBARSET_ONBRUSHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "brushChanged()", "brushChanged()" ) );
}

HB_FUNC( QBARSET_ONCLICKED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "clicked(int)", "clicked(int)" ) );
}

HB_FUNC( QBARSET_ONCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "colorChanged(QColor)", "colorChanged(QColor)" ) );
}

HB_FUNC( QBARSET_ONDOUBLECLICKED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "doubleClicked(int)", "doubleClicked(int)" ) );
}

HB_FUNC( QBARSET_ONHOVERED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "hovered(bool,int)", "hovered(bool,int)" ) );
}

HB_FUNC( QBARSET_ONLABELBRUSHCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelBrushChanged()", "labelBrushChanged()" ) );
}

HB_FUNC( QBARSET_ONLABELCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelChanged()", "labelChanged()" ) );
}

HB_FUNC( QBARSET_ONLABELCOLORCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelColorChanged(QColor)", "labelColorChanged(QColor)" ) );
}

HB_FUNC( QBARSET_ONLABELFONTCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "labelFontChanged()", "labelFontChanged()" ) );
}

HB_FUNC( QBARSET_ONPENCHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "penChanged()", "penChanged()" ) );
}

HB_FUNC( QBARSET_ONPRESSED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "pressed(int)", "pressed(int)" ) );
}

HB_FUNC( QBARSET_ONRELEASED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "released(int)", "released(int)" ) );
}

HB_FUNC( QBARSET_ONVALUECHANGED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "valueChanged(int)", "valueChanged(int)" ) );
}

HB_FUNC( QBARSET_ONVALUESADDED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "valuesAdded(int,int)", "valuesAdded(int,int)" ) );
}

HB_FUNC( QBARSET_ONVALUESREMOVED )
{
  if( s == NULL )
  {
    s = new SlotsQBarSet( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "valuesRemoved(int,int)", "valuesRemoved(int,int)" ) );
}

