/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

CLASS QCameraInfo

   DATA pointer
   DATA self_destruction INIT .F.

   METHOD new
   METHOD delete

   METHOD availableCameras
   METHOD defaultCamera
   METHOD description
   METHOD deviceName
   METHOD isNull
   METHOD orientation
   METHOD position

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QCameraInfo
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <QCameraInfo>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QCameraInfo>
#endif

/*
explicit QCameraInfo(const QByteArray &name = QByteArray())
*/
void QCameraInfo_new1 ()
{
  QCameraInfo * o = new QCameraInfo ( ISNIL(1)? QByteArray() : *(QByteArray *) _qt5xhb_itemGetPtr(1) );
  _qt5xhb_returnNewObject( o, true );
}

/*
explicit QCameraInfo(const QCamera &camera)
*/
void QCameraInfo_new2 ()
{
  QCameraInfo * o = new QCameraInfo ( *PQCAMERA(1) );
  _qt5xhb_returnNewObject( o, true );
}

/*
QCameraInfo(const QCameraInfo& other)
*/
void QCameraInfo_new3 ()
{
  QCameraInfo * o = new QCameraInfo ( *PQCAMERAINFO(1) );
  _qt5xhb_returnNewObject( o, true );
}

//[1]explicit QCameraInfo(const QByteArray &name = QByteArray())
//[2]explicit QCameraInfo(const QCamera &camera)
//[3]QCameraInfo(const QCameraInfo& other)

HB_FUNC_STATIC( QCAMERAINFO_NEW )
{
  if( ISBETWEEN(0,1) && ISQBYTEARRAY(1) )
  {
    QCameraInfo_new1();
  }
  else if( ISNUMPAR(1) && ISQCAMERA(1) )
  {
    QCameraInfo_new2();
  }
  else if( ISNUMPAR(1) && ISQCAMERAINFO(1) )
  {
    QCameraInfo_new3();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
~QCameraInfo()
*/
HB_FUNC_STATIC( QCAMERAINFO_DELETE )
{
  QCameraInfo * obj = (QCameraInfo *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isNull() const
*/
HB_FUNC_STATIC( QCAMERAINFO_ISNULL )
{
  QCameraInfo * obj = (QCameraInfo *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isNull () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QString deviceName() const
*/
HB_FUNC_STATIC( QCAMERAINFO_DEVICENAME )
{
  QCameraInfo * obj = (QCameraInfo *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->deviceName () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QString description() const
*/
HB_FUNC_STATIC( QCAMERAINFO_DESCRIPTION )
{
  QCameraInfo * obj = (QCameraInfo *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->description () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QCamera::Position position() const
*/
HB_FUNC_STATIC( QCAMERAINFO_POSITION )
{
  QCameraInfo * obj = (QCameraInfo *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->position () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
int orientation() const
*/
HB_FUNC_STATIC( QCAMERAINFO_ORIENTATION )
{
  QCameraInfo * obj = (QCameraInfo *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->orientation () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
static QCameraInfo defaultCamera()
*/
HB_FUNC_STATIC( QCAMERAINFO_DEFAULTCAMERA )
{
    if( ISNUMPAR(0) )
  {
      QCameraInfo * ptr = new QCameraInfo( QCameraInfo::defaultCamera () );
      _qt5xhb_createReturnClass ( ptr, "QCAMERAINFO", true );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
static QList<QCameraInfo> availableCameras(QCamera::Position position = QCamera::UnspecifiedPosition)
*/
HB_FUNC_STATIC( QCAMERAINFO_AVAILABLECAMERAS )
{
    if( ISBETWEEN(0,1) && ISOPTNUM(1) )
  {
      QList<QCameraInfo> list = QCameraInfo::availableCameras ( ISNIL(1)? (QCamera::Position) QCamera::UnspecifiedPosition : (QCamera::Position) hb_parni(1) );
      PHB_DYNS pDynSym = hb_dynsymFindName( "QCAMERAINFO" );
      PHB_ITEM pArray = hb_itemArrayNew(0);
      int i;
      for(i=0;i<list.count();i++)
      {
        if( pDynSym )
        {
          hb_vmPushDynSym( pDynSym );
          hb_vmPushNil();
          hb_vmDo( 0 );
          PHB_ITEM pObject = hb_itemNew( NULL );
          hb_itemCopy( pObject, hb_stackReturnItem() );
          PHB_ITEM pItem = hb_itemNew( NULL );
          hb_itemPutPtr( pItem, (QCameraInfo *) new QCameraInfo ( list[i] ) );
          hb_objSendMsg( pObject, "_POINTER", 1, pItem );
          hb_itemRelease( pItem );
          PHB_ITEM pDestroy = hb_itemNew( NULL );
          hb_itemPutL( pDestroy, true );
          hb_objSendMsg( pObject, "_SELF_DESTRUCTION", 1, pDestroy );
          hb_itemRelease( pDestroy );
          hb_arrayAddForward( pArray, pObject );
          hb_itemRelease( pObject );
        }
        else
        {
          hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QCAMERAINFO", HB_ERR_ARGS_BASEPARAMS );
        }
      }
      hb_itemReturnRelease(pArray);
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

#pragma ENDDUMP
