/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QMediaGaplessPlaybackControlSlots.h"

static QMediaGaplessPlaybackControlSlots * s = NULL;

QMediaGaplessPlaybackControlSlots::QMediaGaplessPlaybackControlSlots(QObject *parent) : QObject(parent)
{
}

QMediaGaplessPlaybackControlSlots::~QMediaGaplessPlaybackControlSlots()
{
}
void QMediaGaplessPlaybackControlSlots::advancedToNextMedia()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "advancedToNextMedia()" );
  if( cb )
  {
    PHB_ITEM psender = Signals_return_qobject ( (QObject *) object, "QMEDIAGAPLESSPLAYBACKCONTROL" );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QMediaGaplessPlaybackControlSlots::crossfadeTimeChanged( qreal crossfadeTime )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "crossfadeTimeChanged(qreal)" );
  if( cb )
  {
    PHB_ITEM psender = Signals_return_qobject ( (QObject *) object, "QMEDIAGAPLESSPLAYBACKCONTROL" );
    PHB_ITEM pcrossfadeTime = hb_itemPutND( NULL, crossfadeTime );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcrossfadeTime );
    hb_itemRelease( psender );
    hb_itemRelease( pcrossfadeTime );
  }
}
void QMediaGaplessPlaybackControlSlots::nextMediaChanged( const QMediaContent & media )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "nextMediaChanged(QMediaContent)" );
  if( cb )
  {
    PHB_ITEM psender = Signals_return_qobject ( (QObject *) object, "QMEDIAGAPLESSPLAYBACKCONTROL" );
    PHB_ITEM pmedia = Signals_return_object( (void *) &media, "QMEDIACONTENT" );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmedia );
    hb_itemRelease( psender );
    hb_itemRelease( pmedia );
  }
}

void QMediaGaplessPlaybackControlSlots_connect_signal ( const QString & signal, const QString & slot )
{
  if( s == NULL )
  {
    s = new QMediaGaplessPlaybackControlSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, signal, slot ) );
}
