/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

CLASS QOAuth1 INHERIT QAbstractOAuth

   METHOD new
   METHOD delete

   METHOD clientSharedSecret
   METHOD continueGrantWithVerifier
   METHOD grant
   METHOD setClientCredentials
   METHOD setClientSharedSecret
   METHOD setSignatureMethod
   METHOD setTemporaryCredentialsUrl
   METHOD setTokenCredentials
   METHOD setTokenCredentialsUrl
   METHOD setTokenSecret
   METHOD signatureMethod
   METHOD temporaryCredentialsUrl
   METHOD tokenCredentialsUrl
   METHOD tokenSecret

   METHOD onClientSharedSecretChanged
   METHOD onSignatureMethodChanged
   METHOD onTemporaryCredentialsUrlChanged
   METHOD onTokenCredentialsUrlChanged
   METHOD onTokenSecretChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QOAuth1
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <QOAuth1>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QOAuth1>
#endif

/*
explicit QOAuth1(QObject *parent = nullptr)
*/
void QOAuth1_new1 ()
{
  QOAuth1 * o = new QOAuth1 ( OPQOBJECT(1,nullptr) );
  _qt5xhb_returnNewObject( o, false );
}

/*
explicit QOAuth1(QNetworkAccessManager *manager, QObject *parent = nullptr)
*/
void QOAuth1_new2 ()
{
  QOAuth1 * o = new QOAuth1 ( PQNETWORKACCESSMANAGER(1), OPQOBJECT(2,nullptr) );
  _qt5xhb_returnNewObject( o, false );
}

/*
QOAuth1(const QString &clientIdentifier, const QString &clientSharedSecret, QNetworkAccessManager *manager, QObject *parent = nullptr)
*/

//[1]explicit QOAuth1(QObject *parent = nullptr)
//[2]explicit QOAuth1(QNetworkAccessManager *manager, QObject *parent = nullptr)

HB_FUNC_STATIC( QOAUTH1_NEW )
{
  if( ISBETWEEN(0,1) && (ISQOBJECT(1)||ISNIL(1)) )
  {
    QOAuth1_new1();
  }
  else if( ISBETWEEN(1,2) && ISQNETWORKACCESSMANAGER(1) && (ISQOBJECT(2)||ISNIL(2)) )
  {
    QOAuth1_new2();
  }
}

HB_FUNC_STATIC( QOAUTH1_DELETE )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QString clientSharedSecret() const
*/
HB_FUNC_STATIC( QOAUTH1_CLIENTSHAREDSECRET )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->clientSharedSecret () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setClientSharedSecret(const QString &clientSharedSecret)
*/
HB_FUNC_STATIC( QOAUTH1_SETCLIENTSHAREDSECRET )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setClientSharedSecret ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QPair<QString, QString> clientCredentials() const
*/

/*
void setClientCredentials(const QPair<QString, QString> &clientCredentials)
*/

/*
void setClientCredentials(const QString &clientIdentifier, const QString &clientSharedSecret)
*/
HB_FUNC_STATIC( QOAUTH1_SETCLIENTCREDENTIALS )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(2) && ISCHAR(1) && ISCHAR(2) )
    {
      obj->setClientCredentials ( PQSTRING(1), PQSTRING(2) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

//[1]void setClientCredentials(const QPair<QString, QString> &clientCredentials)
//[2]void setClientCredentials(const QString &clientIdentifier, const QString &clientSharedSecret)

/*
QString tokenSecret() const
*/
HB_FUNC_STATIC( QOAUTH1_TOKENSECRET )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->tokenSecret () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setTokenSecret(const QString &tokenSecret)
*/
HB_FUNC_STATIC( QOAUTH1_SETTOKENSECRET )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setTokenSecret ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QPair<QString, QString> tokenCredentials() const
*/

/*
void setTokenCredentials(const QPair<QString, QString> &tokenCredentials)
*/

/*
void setTokenCredentials(const QString &token, const QString &tokenSecret)
*/
HB_FUNC_STATIC( QOAUTH1_SETTOKENCREDENTIALS )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(2) && ISCHAR(1) && ISCHAR(2) )
    {
      obj->setTokenCredentials ( PQSTRING(1), PQSTRING(2) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

//[1]void setTokenCredentials(const QPair<QString, QString> &tokenCredentials)
//[2]void setTokenCredentials(const QString &token, const QString &tokenSecret)

/*
QUrl temporaryCredentialsUrl() const
*/
HB_FUNC_STATIC( QOAUTH1_TEMPORARYCREDENTIALSURL )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QUrl * ptr = new QUrl( obj->temporaryCredentialsUrl () );
      _qt5xhb_createReturnClass ( ptr, "QURL", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setTemporaryCredentialsUrl(const QUrl &url)
*/
HB_FUNC_STATIC( QOAUTH1_SETTEMPORARYCREDENTIALSURL )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQURL(1) )
    {
      obj->setTemporaryCredentialsUrl ( *PQURL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QUrl tokenCredentialsUrl() const
*/
HB_FUNC_STATIC( QOAUTH1_TOKENCREDENTIALSURL )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QUrl * ptr = new QUrl( obj->tokenCredentialsUrl () );
      _qt5xhb_createReturnClass ( ptr, "QURL", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setTokenCredentialsUrl(const QUrl &url)
*/
HB_FUNC_STATIC( QOAUTH1_SETTOKENCREDENTIALSURL )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQURL(1) )
    {
      obj->setTokenCredentialsUrl ( *PQURL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
SignatureMethod signatureMethod() const
*/
HB_FUNC_STATIC( QOAUTH1_SIGNATUREMETHOD )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->signatureMethod () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setSignatureMethod(SignatureMethod value)
*/
HB_FUNC_STATIC( QOAUTH1_SETSIGNATUREMETHOD )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setSignatureMethod ( (QOAuth1::SignatureMethod) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QNetworkReply *head(const QUrl &url, const QVariantMap &parameters = QVariantMap()) override
*/

/*
QNetworkReply *get(const QUrl &url, const QVariantMap &parameters = QVariantMap()) override
*/

/*
QNetworkReply *post(const QUrl &url, const QVariantMap &parameters = QVariantMap()) override
*/

/*
QNetworkReply *put(const QUrl &url, const QVariantMap &parameters = QVariantMap()) override
*/

/*
QNetworkReply *deleteResource(const QUrl &url, const QVariantMap &parameters = QVariantMap()) override
*/

/*
void grant() override (slot)
*/
HB_FUNC_STATIC( QOAUTH1_GRANT )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->grant ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void continueGrantWithVerifier(const QString &verifier) (slot)
*/
HB_FUNC_STATIC( QOAUTH1_CONTINUEGRANTWITHVERIFIER )
{
  QOAuth1 * obj = (QOAuth1 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->continueGrantWithVerifier ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QNetworkReply *requestTemporaryCredentials(QNetworkAccessManager::Operation operation, const QUrl &url, const QVariantMap &parameters = QVariantMap()) (protected)
*/

/*
QNetworkReply *requestTokenCredentials(QNetworkAccessManager::Operation operation, const QUrl &url, const QPair<QString, QString> &temporaryToken, const QVariantMap &parameters = QVariantMap()) (protected)
*/

/*
void setup(QNetworkRequest *request, const QVariantMap &signingParameters, QNetworkAccessManager::Operation operation) (protected)
*/

/*
static QByteArray nonce() (protected)
*/

/*
static QByteArray generateAuthorizationHeader(const QVariantMap &oauthParams) (protected)
*/

#pragma ENDDUMP
