/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QAbstractOAuthSlots.h"

static QAbstractOAuthSlots * s = NULL;

QAbstractOAuthSlots::QAbstractOAuthSlots(QObject *parent) : QObject(parent)
{
}

QAbstractOAuthSlots::~QAbstractOAuthSlots()
{
}
void QAbstractOAuthSlots::authorizationUrlChanged( const QUrl & url )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "authorizationUrlChanged(QUrl)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM purl = hb_itemPutPtr( NULL, (QUrl *) &url );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, purl );
    hb_itemRelease( psender );
    hb_itemRelease( purl );
  }
}
void QAbstractOAuthSlots::authorizeWithBrowser( const QUrl & url )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "authorizeWithBrowser(QUrl)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM purl = hb_itemPutPtr( NULL, (QUrl *) &url );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, purl );
    hb_itemRelease( psender );
    hb_itemRelease( purl );
  }
}
void QAbstractOAuthSlots::clientIdentifierChanged( const QString & clientIdentifier )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "clientIdentifierChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pclientIdentifier = hb_itemPutC( NULL, QSTRINGTOSTRING(clientIdentifier) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pclientIdentifier );
    hb_itemRelease( psender );
    hb_itemRelease( pclientIdentifier );
  }
}
void QAbstractOAuthSlots::contentTypeChanged( QAbstractOAuth::ContentType contentType )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "contentTypeChanged(QAbstractOAuth::ContentType)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcontentType = hb_itemPutNI( NULL, (int) contentType );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pcontentType );
    hb_itemRelease( psender );
    hb_itemRelease( pcontentType );
  }
}
void QAbstractOAuthSlots::finished( QNetworkReply * reply )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "finished(QNetworkReply*)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM preply = hb_itemPutPtr( NULL, (QNetworkReply *) reply );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, preply );
    hb_itemRelease( psender );
    hb_itemRelease( preply );
  }
}
void QAbstractOAuthSlots::granted()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "granted()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QAbstractOAuthSlots::replyDataReceived( const QByteArray & data )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "replyDataReceived(QByteArray)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdata = hb_itemPutPtr( NULL, (QByteArray *) &data );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pdata );
    hb_itemRelease( psender );
    hb_itemRelease( pdata );
  }
}
void QAbstractOAuthSlots::statusChanged( QAbstractOAuth::Status status )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "statusChanged(QAbstractOAuth::Status)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstatus = hb_itemPutNI( NULL, (int) status );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pstatus );
    hb_itemRelease( psender );
    hb_itemRelease( pstatus );
  }
}
void QAbstractOAuthSlots::tokenChanged( const QString & token )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "tokenChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM ptoken = hb_itemPutC( NULL, QSTRINGTOSTRING(token) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ptoken );
    hb_itemRelease( psender );
    hb_itemRelease( ptoken );
  }
}

HB_FUNC( QABSTRACTOAUTH_ONAUTHORIZATIONURLCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstractOAuthSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "authorizationUrlChanged(QUrl)", "authorizationUrlChanged(QUrl)" ) );
}

HB_FUNC( QABSTRACTOAUTH_ONAUTHORIZEWITHBROWSER )
{
  if( s == NULL )
  {
    s = new QAbstractOAuthSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "authorizeWithBrowser(QUrl)", "authorizeWithBrowser(QUrl)" ) );
}

HB_FUNC( QABSTRACTOAUTH_ONCLIENTIDENTIFIERCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstractOAuthSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "clientIdentifierChanged(QString)", "clientIdentifierChanged(QString)" ) );
}

HB_FUNC( QABSTRACTOAUTH_ONCONTENTTYPECHANGED )
{
  if( s == NULL )
  {
    s = new QAbstractOAuthSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "contentTypeChanged(QAbstractOAuth::ContentType)", "contentTypeChanged(QAbstractOAuth::ContentType)" ) );
}

HB_FUNC( QABSTRACTOAUTH_ONFINISHED )
{
  if( s == NULL )
  {
    s = new QAbstractOAuthSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "finished(QNetworkReply*)", "finished(QNetworkReply*)" ) );
}

HB_FUNC( QABSTRACTOAUTH_ONGRANTED )
{
  if( s == NULL )
  {
    s = new QAbstractOAuthSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "granted()", "granted()" ) );
}

HB_FUNC( QABSTRACTOAUTH_ONREPLYDATARECEIVED )
{
  if( s == NULL )
  {
    s = new QAbstractOAuthSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "replyDataReceived(QByteArray)", "replyDataReceived(QByteArray)" ) );
}

HB_FUNC( QABSTRACTOAUTH_ONSTATUSCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstractOAuthSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "statusChanged(QAbstractOAuth::Status)", "statusChanged(QAbstractOAuth::Status)" ) );
}

HB_FUNC( QABSTRACTOAUTH_ONTOKENCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstractOAuthSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "tokenChanged(QString)", "tokenChanged(QString)" ) );
}

