/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

CLASS QAbstractOAuth2 INHERIT QAbstractOAuth

   METHOD delete

   METHOD clientIdentifierSharedKey
   METHOD createAuthenticatedUrl
   METHOD deleteResource
   METHOD expirationAt
   METHOD get
   METHOD head
   METHOD post
   METHOD put
   METHOD refreshToken
   METHOD responseType
   METHOD scope
   METHOD setClientIdentifierSharedKey
   METHOD setRefreshToken
   METHOD setScope
   METHOD setState
   METHOD setUserAgent
   METHOD state
   METHOD userAgent

   METHOD onClientIdentifierSharedKeyChanged
   METHOD onError
   METHOD onExpirationAtChanged
   METHOD onResponseTypeChanged
   METHOD onScopeChanged
   METHOD onStateChanged
   METHOD onUserAgentChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QAbstractOAuth2
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <QAbstractOAuth2>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QAbstractOAuth2>
#endif

/*
explicit QAbstractOAuth2(QObject *parent = nullptr) (abstract)
*/

/*
explicit QAbstractOAuth2(QNetworkAccessManager *manager, QObject *parent = nullptr) (abstract)
*/

/*
explicit QAbstractOAuth2(QAbstractOAuth2Private &, QObject *parent = nullptr) (protected)
*/

/*
~QAbstractOAuth2()
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_DELETE )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QString scope() const
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_SCOPE )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->scope () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setScope(const QString &scope)
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_SETSCOPE )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setScope ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QString userAgent() const
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_USERAGENT )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->userAgent () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setUserAgent(const QString &userAgent)
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_SETUSERAGENT )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setUserAgent ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QString clientIdentifierSharedKey() const
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_CLIENTIDENTIFIERSHAREDKEY )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->clientIdentifierSharedKey () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setClientIdentifierSharedKey(const QString &clientIdentifierSharedKey)
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_SETCLIENTIDENTIFIERSHAREDKEY )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setClientIdentifierSharedKey ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QString state() const
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_STATE )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->state () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setState(const QString &state)
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_SETSTATE )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setState ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QDateTime expirationAt() const
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_EXPIRATIONAT )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QDateTime * ptr = new QDateTime( obj->expirationAt () );
      _qt5xhb_createReturnClass ( ptr, "QDATETIME", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
Q_INVOKABLE virtual QUrl createAuthenticatedUrl(const QUrl &url, const QVariantMap &parameters = QVariantMap())
*/

/*
Q_INVOKABLE QNetworkReply *head(const QUrl &url, const QVariantMap &parameters = QVariantMap()) override
*/

/*
Q_INVOKABLE QNetworkReply *get(const QUrl &url, const QVariantMap &parameters = QVariantMap()) override
*/

/*
Q_INVOKABLE QNetworkReply *post(const QUrl &url, const QVariantMap &parameters = QVariantMap()) override
*/

/*
Q_INVOKABLE QNetworkReply *put(const QUrl &url, const QVariantMap &parameters = QVariantMap()) override
*/

/*
Q_INVOKABLE QNetworkReply *deleteResource(const QUrl &url, const QVariantMap &parameters = QVariantMap()) override
*/

/*
QString responseType() const
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_RESPONSETYPE )
{
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->responseType () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setResponseType(const QString &responseType) (protected)
*/

/*
QString refreshToken() const
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_REFRESHTOKEN )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->refreshToken () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setRefreshToken(const QString &refreshToken)
*/
HB_FUNC_STATIC( QABSTRACTOAUTH2_SETREFRESHTOKEN )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QAbstractOAuth2 * obj = (QAbstractOAuth2 *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setRefreshToken ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

void QAbstractOAuth2Slots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QABSTRACTOAUTH2_ONCLIENTIDENTIFIERSHAREDKEYCHANGED )
{
  QAbstractOAuth2Slots_connect_signal( "clientIdentifierSharedKeyChanged(QString)", "clientIdentifierSharedKeyChanged(QString)" );
}

HB_FUNC_STATIC( QABSTRACTOAUTH2_ONERROR )
{
  QAbstractOAuth2Slots_connect_signal( "error(QString,QString,QUrl)", "error(QString,QString,QUrl)" );
}

HB_FUNC_STATIC( QABSTRACTOAUTH2_ONEXPIRATIONATCHANGED )
{
  QAbstractOAuth2Slots_connect_signal( "expirationAtChanged(QDateTime)", "expirationAtChanged(QDateTime)" );
}

HB_FUNC_STATIC( QABSTRACTOAUTH2_ONRESPONSETYPECHANGED )
{
  QAbstractOAuth2Slots_connect_signal( "responseTypeChanged(QString)", "responseTypeChanged(QString)" );
}

HB_FUNC_STATIC( QABSTRACTOAUTH2_ONSCOPECHANGED )
{
  QAbstractOAuth2Slots_connect_signal( "scopeChanged(QString)", "scopeChanged(QString)" );
}

HB_FUNC_STATIC( QABSTRACTOAUTH2_ONSTATECHANGED )
{
  QAbstractOAuth2Slots_connect_signal( "stateChanged(QString)", "stateChanged(QString)" );
}

HB_FUNC_STATIC( QABSTRACTOAUTH2_ONUSERAGENTCHANGED )
{
  QAbstractOAuth2Slots_connect_signal( "userAgentChanged(QString)", "userAgentChanged(QString)" );
}

#pragma ENDDUMP
